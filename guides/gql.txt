1:"$Sreact.fragment"
2:I[60881,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","3758","static/chunks/3758-69daa9d9751a2510.js","7066","static/chunks/7066-9ea237f8271c6a3e.js","7948","static/chunks/7948-bc1a3f31d95d4752.js","7177","static/chunks/app/layout-b825f93bc4501ddc.js"],"Providers"]
3:I[30895,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","3758","static/chunks/3758-69daa9d9751a2510.js","7066","static/chunks/7066-9ea237f8271c6a3e.js","7948","static/chunks/7948-bc1a3f31d95d4752.js","7177","static/chunks/app/layout-b825f93bc4501ddc.js"],"Layout"]
4:I[87555,[],""]
5:I[31295,[],""]
6:I[30122,["3975","static/chunks/3975-65073ecd7686b488.js","4345","static/chunks/app/not-found-28cf6d37da7270ee.js"],"default"]
7:I[87254,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-0fbb9cc11ad8feb4.js","329","static/chunks/app/guides/gql/page-5690d7cbed3613ec.js"],"Heading"]
8:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-0fbb9cc11ad8feb4.js","329","static/chunks/app/guides/gql/page-5690d7cbed3613ec.js"],"Pre"]
9:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-0fbb9cc11ad8feb4.js","329","static/chunks/app/guides/gql/page-5690d7cbed3613ec.js"],"Code"]
c:I[60445,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-0fbb9cc11ad8feb4.js","329","static/chunks/app/guides/gql/page-5690d7cbed3613ec.js"],"default"]
f:I[73019,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-0fbb9cc11ad8feb4.js","329","static/chunks/app/guides/gql/page-5690d7cbed3613ec.js"],"Feedback"]
10:I[59665,[],"OutletBoundary"]
13:I[74911,[],"AsyncMetadataOutlet"]
15:I[59665,[],"ViewportBoundary"]
17:I[59665,[],"MetadataBoundary"]
19:I[26614,[],""]
:HL["/docs-v2/_next/static/css/af2d6aec183849c2.css","style"]
a:T68a,<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transactions</span><span style="color: var(--shiki-color-text)">(tags: [{name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;App-Name&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> values</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;YourAppName&quot;</span><span style="color: var(--shiki-color-text)">}]) {</span></span>
<span><span style="color: var(--shiki-color-text)">    edges {</span></span>
<span><span style="color: var(--shiki-color-text)">      node {</span></span>
<span><span style="color: var(--shiki-color-text)">        id</span></span>
<span><span style="color: var(--shiki-color-text)">        data {</span></span>
<span><span style="color: var(--shiki-color-text)">          size</span></span>
<span><span style="color: var(--shiki-color-text)">          type</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>b:T459,<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transactions</span><span style="color: var(--shiki-color-text)">(first: </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> after: </span><span style="color: var(--shiki-token-string-expression)">&quot;cursorOfLastItem&quot;</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    edges {</span></span>
<span><span style="color: var(--shiki-color-text)">      node {</span></span>
<span><span style="color: var(--shiki-color-text)">        id</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>d:T1395,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">axios</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;axios&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">query</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  query</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`</span></span>
<span><span style="color: var(--shiki-token-string-expression)">    {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">      transactions(tags: [{name: &quot;App-Name&quot;, values: &quot;YourAppName&quot;}]) {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">        edges {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">          node {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">            id</span></span>
<span><span style="color: var(--shiki-token-string-expression)">            tags {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">              name</span></span>
<span><span style="color: var(--shiki-token-string-expression)">              value</span></span>
<span><span style="color: var(--shiki-token-string-expression)">            }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">          }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">        }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">      }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">    }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">  `</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-constant)">axios</span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;https://arweave.net/graphql&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> query</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  headers</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-string-expression)">&#39;Content-Type&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;application/json&#39;</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(response </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.data))</span></span>
<span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(error </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Error:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error));</span></span>
<span></span>e:T109a,<span><span style="color: var(--shiki-token-comment)">// Assuming the Arweave SDK is already set up and initialized</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">query</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  query</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`</span></span>
<span><span style="color: var(--shiki-token-string-expression)">    {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">      transactions(tags: [{name: &quot;App-Name&quot;, values: &quot;YourAppName&quot;}]) {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">        edges {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">          node {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">            id</span></span>
<span><span style="color: var(--shiki-token-string-expression)">            tags {</span></span>
<span><span style="color: var(--shiki-token-string-expression)">              name</span></span>
<span><span style="color: var(--shiki-token-string-expression)">              value</span></span>
<span><span style="color: var(--shiki-token-string-expression)">            }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">          }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">        }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">      }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">    }</span></span>
<span><span style="color: var(--shiki-token-string-expression)">  `</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-constant)">arweave</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/graphql&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> query)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(response </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.data);</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(error </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Error:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span></span>0:{"P":null,"b":"ju0DZki98M8q3H26MrSOM","p":"/docs-v2","c":["","guides","gql"],"i":false,"f":[[["",{"children":["guides",{"children":["gql",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/docs-v2/_next/static/css/af2d6aec183849c2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L2",null,{"children":["$","$L3",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]}]]}],{"children":["guides",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["gql",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full w-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose w-full dark:prose-invert","children":[["$","h1",null,{"children":"GraphQL"}],"\n",["$","$L7",null,{"level":2,"id":"overview","children":"Overview"}],"\n",["$","p",null,{"children":"GraphQL is a powerful query language designed for modern web applications to efficiently fetch data. It enables precise queries, allowing users to specify exactly which data they need and in what format, significantly reducing the amount of unnecessary data transferred. This approach is ideal for dealing with complex systems and large datasets, as it minimizes bandwidth and improves performance. GraphQL operates through a single endpoint, streamlining the way applications communicate with databases."}],"\n",["$","p",null,{"children":"The integration of GraphQL with Arweave introduces a refined method for interacting with decentralized data storage. Arweave allows for the tagging of uploaded data, facilitating enhanced searchability and retrievability within its blockchain network. Utilizing GraphQL, users can perform targeted queries that leverage these tags, ensuring the retrieval of specific data swiftly and efficiently. This capability is particularly beneficial for the development of decentralized applications (dApps), the archival of content in a permanent and unalterable form, and the establishment of data marketplaces where precision and efficiency in data access are paramount."}],"\n",["$","p",null,{"children":"Together, GraphQL and Arweave form a compelling combination, offering developers and users a robust framework for managing and querying data in a decentralized environment. This integration not only promotes the efficient and scalable retrieval of data but also supports the creation of more sophisticated and data-intensive applications on the decentralized web, maintaining a balance between technical depth and accessibility."}],"\n",["$","$L7",null,{"level":2,"id":"constructing-a-query","children":"Constructing a Query"}],"\n",["$","h3",null,{"children":"Basic Syntax"}],"\n",["$","p",null,{"children":"In GraphQL, you start with a root field and use braces to outline the fields you want to retrieve, allowing for precise, hierarchical data requests. For instance:"}],"\n",["$","$L8",null,{"language":"js","code":"{\n  transactions {\n    edges {\n      node {\n        id\n        tags {\n          name\n          value\n        }\n      }\n    }\n  }\n}\n","children":["$","$L9",null,{"className":"language-js","children":"<span><span style=\"color: var(--shiki-color-text)\">{</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">  transactions {</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">    edges {</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">      node {</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">        id</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">        tags {</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">          name</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">          value</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">        }</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">      }</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">    }</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">  }</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">}</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"This query demonstrates fetching transactions and their tags, illustrating the hierarchical nature of GraphQL queries."}],"\n",["$","h3",null,{"children":"Customizing Searches with Tags"}],"\n",["$","p",null,{"children":"Arweave utilizes a tagging system for transactions, enabling intricate search capabilities. You can filter queries using these tags:"}],"\n",["$","$L8",null,{"language":"js","code":"{\n  transactions(tags: [{name: \"App-Name\", values: \"YourAppName\"}]) {\n    edges {\n      node {\n        id\n        data {\n          size\n          type\n        }\n      }\n    }\n  }\n}\n","children":["$","$L9",null,{"className":"language-js","children":"$a"}]}],"\n",["$","p",null,{"language":"txt","children":["This example filters transactions by a specific application name, and returns the ",["$","$L9",null,{"children":"id"}],", ",["$","$L9",null,{"children":"size"}],", and ",["$","$L9",null,{"children":"type"}]," of the transaction, showcasing how to customize queries for targeted data retrieval."]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"NOTE"}],": Tags are not the only option for filtering results, but are extremely useful due to the ability to add custom tags during the upload process."]}],"\n",["$","h3",null,{"children":"Understanding Edges and Nodes"}],"\n",["$","p",null,{"children":"In the realm of GraphQL queries, especially when interfacing with Arweave, grasping the concept of edges and nodes is pivotal for constructing efficient and effective queries. This structure is not unique to Arweave but is particularly relevant due to the decentralized and interconnected nature of the data stored on its blockchain."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Nodes"}],": At the heart of GraphQL's query structure, nodes represent individual data points or entities. In the context of Arweave, a node could be a transaction, a block, or any piece of data stored within the network. Nodes are the primary targets of your query, containing the data you wish to retrieve, such as transaction IDs, tags, or the content of data transactions."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Edges"}],": Serving as the glue between nodes, edges are constructs that outline the relationship between different nodes. They can contain metadata about the connection, such as the nature of the relationship or additional attributes that describe how nodes are linked. In many GraphQL implementations, including those that interact with Arweave, edges are used to navigate through collections of related data, making them crucial for understanding the data's structure and lineage."]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"children":"This hierarchical model is especially useful for querying complex and relational data sets, allowing for detailed navigation and efficient data retrieval within Arweave's decentralized storage system. By effectively utilizing the edges and nodes structure, you can precisely target the data you need, whether it's filtering transactions by tags, fetching related transactions, or exploring the blockchain's structure."}],"\n",["$","h3",null,{"children":"Pagination"}],"\n",["$","p",null,{"language":"txt","children":["To add pagination to your GraphQL queries, you can use the ",["$","$L9",null,{"children":"first"}],", ",["$","$L9",null,{"children":"last"}],", ",["$","$L9",null,{"children":"before"}],", and ",["$","$L9",null,{"children":"after"}]," parameters. These parameters control the slice of data you're querying, making data retrieval more efficient and manageable."]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"first"}],": Specify the number of items to retrieve from the start of the list or dataset."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"last"}],": Specify the number of items to retrieve from the end of the list or dataset."]}],"\n"]}],"\n",["$","$L8",null,{"language":"js","code":"{\n  transactions(first: 10) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n","children":["$","$L9",null,{"className":"language-js","children":"<span><span style=\"color: var(--shiki-color-text)\">{</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-function)\">transactions</span><span style=\"color: var(--shiki-color-text)\">(first: </span><span style=\"color: var(--shiki-token-constant)\">10</span><span style=\"color: var(--shiki-color-text)\">) {</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">    edges {</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">      node {</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">        id</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">      }</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">    }</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">  }</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">}</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"This query fetches the first 10 transactions."}],"\n",["$","p",null,{"language":"txt","children":["To navigate through your dataset, you can use after and before in conjunction with ",["$","$L9",null,{"children":"first"}]," or ",["$","$L9",null,{"children":"last"}],". These parameters accept cursors, which are typically provided in the response of your initial query."]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"after"}],": Fetch items after the specified cursor, used with first."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"before"}],": Fetch items before the specified cursor, used with last."]}],"\n"]}],"\n",["$","$L8",null,{"language":"js","code":"{\n  transactions(first: 10, after: \"cursorOfLastItem\") {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n","children":["$","$L9",null,{"className":"language-js","children":"$b"}]}],"\n",["$","p",null,{"children":"This query fetches the next 10 transactions following the transaction with the cursor \"cursorOfLastItem\"."}],"\n",["$","p",null,{"children":"If no pagination terms are set, GraphQL servers may apply default limits to prevent excessively large datasets from being returned in a single query, potentially impacting performance. The default behavior can vary based on the server's configuration but often involves returning a predefined maximum number of items."}],"\n",["$","p",null,{"language":"txt","children":["For instance, without specifying ",["$","$L9",null,{"children":"first"}]," or ",["$","$L9",null,{"children":"last"}],", a query to the transactions field might return the first 5-10 transactions by default, depending on the server settings."]}],"\n",["$","p",null,{"children":"This behavior ensures that server resources are not overwhelmed by large requests and that client applications receive data in manageable chunks."}],"\n",["$","h3",null,{"children":"General Tips for Optimizing Queries"}],"\n",["$","p",null,{"children":"To optimize your GraphQL queries in Arweave, follow these general guidelines:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Specificity"}],": Query with the most precise tags possible to narrow the search scope and enhance performance."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Minimalism"}],": Limit your query to the essential set of tags to reduce processing time and data transfer."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Schema Design"}],": Design your app's schema to reflect query patterns, possibly introducing tags that encapsulate frequent combinations of criteria."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Include Non-tag Fields"}],": Adding fields like owner can refine your search, making your queries more efficient."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Order Your Tags"}],": Arrange tags from most specific to most general to leverage Arweave's indexing more effectively."]}],"\n"]}],"\n",["$","p",null,{"children":"By incorporating these strategies, developers can achieve faster and more precise data access from Arweave, enhancing the performance and responsiveness of decentralized applications. This balanced approach to query construction and optimization is key to navigating the expansive and decentralized storage landscape Arweave provides."}],"\n",["$","$L7",null,{"level":2,"id":"making-a-query","children":"Making a Query"}],"\n",["$","p",null,{"children":"Executing GraphQL queries within the Arweave ecosystem offers flexibility and multiple avenues for developers and users alike. Whether you prefer a hands-on, manual approach to constructing and testing queries, or you aim for automation and integration within your applications, Arweave provides the tools necessary to interact with its decentralized data storage seamlessly."}],"\n",["$","h3",null,{"children":"GraphQL Playground"}],"\n",["$","p",null,{"children":["For those new to GraphQL or seeking to fine-tune their queries before implementation, the GraphQL playground offers an invaluable resource. This interactive interface allows users to manually construct queries, explore the schema, and immediately see the results of their queries. Accessible via web browsers, the playground can be found at the /graphql endpoint of most Arweave indexing services, such as ",["$","$Lc",null,{"href":"https://arweave.net/graphql","children":"https://arweave.net/graphql"}],". Here, you can experiment with different queries, understand the structure of the data, and refine your approach without writing a single line of code in your application."]}],"\n",["$","p",null,{"children":"Steps for Accessing the GraphQL Playground:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["Navigate to ",["$","$Lc",null,{"href":"https://arweave.net/graphql","children":"https://arweave.net/graphql"}],", or the graphql endpoint of any AR.IO gateway, in your web browser."]}],"\n",["$","li",null,{"children":"Enter your GraphQL query in the provided interface."}],"\n",["$","li",null,{"children":"Press the \"play\" button to execute the query to see real-time results and debug as needed."}],"\n"]}],"\n",["$","h3",null,{"children":"Using an API"}],"\n",["$","p",null,{"language":"txt","children":["For application development and automation, making GraphQL queries programmatically is essential. You can send ",["$","$L9",null,{"children":"POST"}]," requests directly to the GraphQL endpoint of any indexing service that supports it, such as arweave.net or any AR.IO gateway. These requests should contain your query in the body, allowing for dynamic and automated data retrieval within your application."]}],"\n",["$","p",null,{"children":"When selecting an indexing service, consider the data coverage and reliability of the gateway to ensure it meets your application's needs. Different gateways might have varying degrees of indexed data available, so choosing one that is consistently up-to-date and comprehensive is key."}],"\n",["$","p",null,{"children":"Example of making a programmatic query:"}],"\n",["$","$L8",null,{"language":"javascript","code":"const axios = require('axios');\n\nconst query = {\n  query: `\n    {\n      transactions(tags: [{name: \"App-Name\", values: \"YourAppName\"}]) {\n        edges {\n          node {\n            id\n            tags {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  `\n};\n\naxios.post('https://arweave.net/graphql', query, {\n  headers: { 'Content-Type': 'application/json' },\n})\n.then(response => console.log(response.data))\n.catch(error => console.error('Error:', error));\n","children":["$","$L9",null,{"className":"language-javascript","children":"$d"}]}],"\n",["$","h3",null,{"children":"Using an SDK"}],"\n",["$","p",null,{"children":["For an even more integrated experience, some Software Development Kits (SDKs) offer direct methods for executing GraphQL queries. The ",["$","$Lc",null,{"href":"https://github.com/ArweaveTeam/arweave-js","children":"Arweave SDK"}],", for example, provides built-in functionalities to interact with the blockchain, simplifying the process of making queries. By leveraging these SDKs, developers can bypass the intricacies of manual HTTP request construction, focusing instead on the logic and design of their applications."]}],"\n",["$","p",null,{"children":"Example of using the Arweave SDK for GraphQL queries:"}],"\n",["$","$L8",null,{"language":"javascript","code":"// Assuming the Arweave SDK is already set up and initialized\nconst query = {\n  query: `\n    {\n      transactions(tags: [{name: \"App-Name\", values: \"YourAppName\"}]) {\n        edges {\n          node {\n            id\n            tags {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  `\n};\n\narweave.api.post('/graphql', query)\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n","children":["$","$L9",null,{"className":"language-javascript","children":"$e"}]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$Lf",null,{}]}]]}],null,["$","$L10",null,{"children":["$L11","$L12",["$","$L13",null,{"promise":"$@14"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","MEzeyP4fEXanXvr1hgYTjv",{"children":[["$","$L15",null,{"children":"$L16"}],null]}],["$","$L17",null,{"children":"$L18"}]]}],false]],"m":"$undefined","G":["$19","$undefined"],"s":false,"S":true}
1a:"$Sreact.suspense"
1b:I[74911,[],"AsyncMetadata"]
18:["$","div",null,{"hidden":true,"children":["$","$1a",null,{"fallback":null,"children":["$","$L1b",null,{"promise":"$@1c"}]}]}]
12:null
16:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
14:{"metadata":[["$","title","0",{"children":"AR.IO Docs"}],["$","meta","1",{"name":"description","content":"AR.IO is a decentralized compute network that makes the permaweb more accessible."}],["$","link","2",{"rel":"icon","href":"/docs-v2/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
1c:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
