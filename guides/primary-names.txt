1:"$Sreact.fragment"
2:I[60881,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","3758","static/chunks/3758.69daa9d9751a2510.js","7066","static/chunks/7066.9ea237f8271c6a3e.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","7948","static/chunks/7948.fe33dfc7f94c2ca6.js","7177","static/chunks/app/layout.5e2b427ee998fd12.js"],"Providers"]
3:I[41056,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","3758","static/chunks/3758.69daa9d9751a2510.js","7066","static/chunks/7066.9ea237f8271c6a3e.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","7948","static/chunks/7948.fe33dfc7f94c2ca6.js","7177","static/chunks/app/layout.5e2b427ee998fd12.js"],"Layout"]
4:I[87555,[],""]
5:I[31295,[],""]
6:I[30122,["3975","static/chunks/3975.65073ecd7686b488.js","4345","static/chunks/app/not-found.28cf6d37da7270ee.js"],"default"]
7:I[87254,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","6493","static/chunks/6493.a59dcbabb32c712c.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","5842","static/chunks/5842.70a45a0df0a47415.js","4522","static/chunks/app/guides/primary-names/page.8f604bf74414b3d0.js"],"Heading"]
8:I[60445,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","6493","static/chunks/6493.a59dcbabb32c712c.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","5842","static/chunks/5842.70a45a0df0a47415.js","4522","static/chunks/app/guides/primary-names/page.8f604bf74414b3d0.js"],"default"]
9:I[68917,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","6493","static/chunks/6493.a59dcbabb32c712c.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","5842","static/chunks/5842.70a45a0df0a47415.js","4522","static/chunks/app/guides/primary-names/page.8f604bf74414b3d0.js"],"default"]
a:I[81571,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","6493","static/chunks/6493.a59dcbabb32c712c.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","5842","static/chunks/5842.70a45a0df0a47415.js","4522","static/chunks/app/guides/primary-names/page.8f604bf74414b3d0.js"],"Code"]
b:I[81571,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","6493","static/chunks/6493.a59dcbabb32c712c.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","5842","static/chunks/5842.70a45a0df0a47415.js","4522","static/chunks/app/guides/primary-names/page.8f604bf74414b3d0.js"],"CodeGroup"]
c:I[81571,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","6493","static/chunks/6493.a59dcbabb32c712c.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","5842","static/chunks/5842.70a45a0df0a47415.js","4522","static/chunks/app/guides/primary-names/page.8f604bf74414b3d0.js"],"Pre"]
17:I[73019,["9268","static/chunks/aaea2bcf.432631bb317559fe.js","3975","static/chunks/3975.65073ecd7686b488.js","8602","static/chunks/8602.7f2210cb40bc95fb.js","6493","static/chunks/6493.a59dcbabb32c712c.js","5760","static/chunks/5760.a98d11e1f0c7c227.js","5842","static/chunks/5842.70a45a0df0a47415.js","4522","static/chunks/app/guides/primary-names/page.8f604bf74414b3d0.js"],"Feedback"]
18:I[59665,[],"OutletBoundary"]
1b:I[74911,[],"AsyncMetadataOutlet"]
1d:I[59665,[],"ViewportBoundary"]
1f:I[59665,[],"MetadataBoundary"]
21:I[26614,[],""]
:HL["/docs-v2/_next/static/css/1018a7a2809d4a87.css","style"]
d:T17e1,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ArweaveSigner</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">jwk</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;KeyFile.json&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    signer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ArweaveSigner</span><span style="color: var(--shiki-color-text)">(jwk)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { id: </span><span style="color: var(--shiki-token-constant)">txId</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.requestPrimaryName</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;my-arns-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    processId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ANT-PROCESS-ID&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Primary name request submitted: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">txId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>e:T114a,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ARIO</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ArConnectSigner } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk/web&#39;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    signer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ArConnectSigner</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.arweaveWallet)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { id: </span><span style="color: var(--shiki-token-constant)">txId</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.requestPrimaryName</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;my-arns-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    processId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ANT-PROCESS-ID&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Primary name request submitted: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">txId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>f:T1134,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryNameRequest</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    initiator</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;WALLET-ADDRESS&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// The wallet address that made the request</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(request)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Example response:</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   &quot;initiator&quot;: &quot;WALLET-ADDRESS&quot;,</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   &quot;name&quot;: &quot;arns&quot;,</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   &quot;startTimestamp&quot;: 1728067635857,</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   &quot;endTimestamp&quot;: 1735843635857</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>10:Tbf4,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ARIO } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk/web&#39;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryNameRequest</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    initiator</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;WALLET-ADDRESS&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// The wallet address that made the request</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(request)</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>11:T1a86,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">ANT</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ArweaveSigner</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">jwk</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;KeyFile.json&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ANT</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    signer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ArweaveSigner</span><span style="color: var(--shiki-color-text)">(jwk)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    processId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ANT-PROCESS-ID&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { id: </span><span style="color: var(--shiki-token-constant)">txId</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-token-function)">.approvePrimaryNameRequest</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;my-arns-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;WALLET-ADDRESS&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    ioProcessId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ARIO-PROCESS-ID&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Primary name request approved: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">txId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>12:T13ef,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ANT</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ArConnectSigner } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk/web&#39;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ANT</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    signer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ArConnectSigner</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.arweaveWallet)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    processId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ANT-PROCESS-ID&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { id: </span><span style="color: var(--shiki-token-constant)">txId</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-token-function)">.approvePrimaryNameRequest</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;my-arns-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;WALLET-ADDRESS&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    ioProcessId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ARIO-PROCESS-ID&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Primary name request approved: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">txId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>13:Tc64,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">primaryName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryName</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;my-arns-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(primaryName)</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>14:Tb57,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ARIO } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk/web&#39;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">primaryName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryName</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;my-arns-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(primaryName)</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>15:T1dfc,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// First page of results</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryNames</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    limit</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    sortBy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;startTimestamp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    sortOrder</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;desc&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;First page:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)">.items)</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)">.hasMore) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Get next page using the cursor from previous response</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nextPage</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryNames</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      cursor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)">.cursor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Last name from previous request</span></span>
<span><span style="color: var(--shiki-color-text)">      limit</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      sortBy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;startTimestamp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      sortOrder</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;desc&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Next page:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nextPage</span><span style="color: var(--shiki-color-text)">.items)</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>16:T1cef,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ARIO } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@ar.io/sdk/web&#39;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// First page of results</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryNames</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    limit</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    sortBy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;startTimestamp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    sortOrder</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;desc&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;First page:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)">.items)</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)">.hasMore) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Get next page using the cursor from previous response</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nextPage</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getPrimaryNames</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      cursor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstPage</span><span style="color: var(--shiki-color-text)">.cursor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Last name from previous request</span></span>
<span><span style="color: var(--shiki-color-text)">      limit</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      sortBy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;startTimestamp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      sortOrder</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;desc&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    })</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Next page:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nextPage</span><span style="color: var(--shiki-color-text)">.items)</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">()</span></span>
<span></span>0:{"P":null,"b":"7W4r0KJ4eNMq82TYtQzCG","p":"/docs-v2","c":["","guides","primary-names"],"i":false,"f":[[["",{"children":["guides",{"children":["primary-names",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/docs-v2/_next/static/css/1018a7a2809d4a87.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L2",null,{"children":["$","$L3",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]}]]}],{"children":["guides",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["primary-names",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full w-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose w-full dark:prose-invert","children":[["$","h1",null,{"children":"Managing Primary Names"}],"\n",["$","$L7",null,{"level":2,"id":"overview","children":"Overview"}],"\n",["$","p",null,{"children":"Primary names allow users to set a user-friendly alias for their Arweave wallet address, simplifying how addresses are displayed across applications. This process involves interaction between two separate smart contracts:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["The ",["$","$L8",null,{"href":"/ario-contract","children":"AR.IO Contract"}]," - which manages the primary name registry and requests"]}],"\n",["$","li",null,{"children":["The ",["$","$L8",null,{"href":"/arns#arweave-name-token-ant","children":"ANT"}]," Contract - which controls the specific ArNS name and must approve any primary name requests"]}],"\n"]}],"\n",["$","p",null,{"children":"The process requires two steps because these are separate contracts:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"First, a request must be submitted to the AR.IO contract to set a specific ArNS name as the primary name for a wallet"}],"\n",["$","li",null,{"children":"Then, the ANT owner must approve this request, confirming that this wallet can use the name as its primary identifier"}],"\n"]}],"\n",["$","p",null,{"children":"This two-step verification ensures that both the wallet owner and the ANT owner have authorized the connection."}],"\n",["$","div",null,{"className":"my-6 flex gap-2.5 rounded-2xl border border-emerald-500/20 bg-emerald-50/50 p-4 leading-6 text-emerald-900 dark:border-emerald-500/30 dark:bg-emerald-500/5 dark:text-emerald-200 dark:[--tw-prose-links-hover:theme(colors.emerald.300)] dark:[--tw-prose-links:theme(colors.white)]","children":[["$","svg",null,{"viewBox":"0 0 16 16","aria-hidden":"true","className":"mt-1 h-4 w-4 flex-none fill-emerald-500 stroke-white dark:fill-emerald-200/20 dark:stroke-emerald-200","children":[["$","circle",null,{"cx":"8","cy":"8","r":"8","strokeWidth":"0"}],["$","path",null,{"fill":"none","strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"1.5","d":"M6.75 7.75h1.5v3.5"}],["$","circle",null,{"cx":"8","cy":"4","r":".5","fill":"none"}]]}],["$","div",null,{"className":"[&>:first-child]:mt-0 [&>:last-child]:mb-0","children":["$","p",null,{"children":"Think of this like setting a username on a social platform - where the\nplatform (AR.IO contract) maintains the registry of usernames, and the name\nowner (ANT) must approve who can claim their name as an identifier."}]}]]}],"\n",["$","$L9",null,{"src":"ar://RjqwJb1jnxz-rZXFxbj6nLP4DRmJUfDsZYvW4eiSzSM"}],"\n",["$","$L7",null,{"level":2,"id":"setting-a-primary-name-with-arns-app","children":"Setting a Primary Name with arns.app"}],"\n",["$","p",null,{"children":[["$","$L8",null,{"href":"https://arns.arweave.net","children":"arns.app"}]," is the official ArNS portal from AR.IO. It allows you to manage your ArNS names and set primary names for your wallet addresses."]}],"\n",["$","p",null,{"children":["To set a primary name using arns.app, connect your wallet and navigate to the ",["$","$L8",null,{"href":"https://arns.arweave.net/#/manage/names","children":"ArNS name management page"}],"."]}],"\n",["$","$L9",null,{"src":"ar://O7YJl7pkEC90tz_TrC3PwIkGEqIC4nDq5cq6ojYO3UM"}],"\n",["$","p",null,{"children":"Simply locate the ArNS name you want to set as primary and click the star icon at the right of the entry. You will then be prompted to accept the cost of setting the name, and the location of the funds to pay for the transaction."}],"\n",["$","$L9",null,{"src":"ar://NC4DZJbmIn9RCzsTHmM_VEeYwS7RD_nBCDi0lWU-LM8"}],"\n",["$","p",null,{"children":"Once the transaction is confirmed, you will be prompted to sign the transaction with your connected wallet. When this is completed, the name will be set as primary for your wallet address, and apps that support primary names will display the name instead of the wallet address."}],"\n",["$","$L9",null,{"src":"ar://Bobu8x6zTIiVhOHDdiXaN_XXUcIBJlQSJq6Hg5vFQSg"}],"\n",["$","$L7",null,{"level":2,"id":"setting-a-primary-name-with-the-ar-io-sdk","children":"Setting a Primary Name With the AR.IO SDK"}],"\n",["$","p",null,{"children":"The process of setting a primary name using the AR.IO SDK involves two steps: requesting and approval. This two-step process ensures proper authorization from both the wallet owner and the ANT owner."}],"\n",["$","h3",null,{"children":"Requesting a Primary Name"}],"\n",["$","p",null,{"children":"When requesting a primary name, you're asking to use an ArNS name as the identifier for your wallet address. This requires:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"The ArNS name to exist"}],"\n",["$","li",null,{"children":["Your wallet to submit the request using the ",["$","$L8",null,{"href":"/ar-io-sdk/primary-names/request-primary-name","language":"txt","children":["$","$La",null,{"children":"requestPrimaryName"}]}]," method"]}],"\n",["$","li",null,{"children":"The ANT owner's approval"}],"\n"]}],"\n",["$","$Lb",null,{"title":"Request Primary Name","children":[["$","$Lc",null,{"language":"typescript","code":"const fs = require('fs')\nconst { ARIO, ArweaveSigner } = require('@ar.io/sdk')\n\nasync function main() {\n  const jwk = JSON.parse(fs.readFileSync('KeyFile.json'))\n  const ario = ARIO.init({\n    signer: new ArweaveSigner(jwk),\n  })\n\n  const { id: txId } = await ario.requestPrimaryName({\n    name: 'my-arns-name',\n    processId: 'ANT-PROCESS-ID',\n  })\n\n  console.log(`Primary name request submitted: ${txId}`)\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$d"}],"title":"NodeJS"}],["$","$Lc",null,{"language":"typescript","code":"import { ARIO, ArConnectSigner } from '@ar.io/sdk/web'\n\nasync function main() {\n  const ario = ARIO.init({\n    signer: new ArConnectSigner(window.arweaveWallet),\n  })\n\n  const { id: txId } = await ario.requestPrimaryName({\n    name: 'my-arns-name',\n    processId: 'ANT-PROCESS-ID',\n  })\n\n  console.log(`Primary name request submitted: ${txId}`)\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$e"}],"title":"Web"}]]}],"\n",["$","h3",null,{"children":"Check Primary Name Requests"}],"\n",["$","p",null,{"children":["The ",["$","$L8",null,{"href":"/ar-io-sdk/primary-names/get-primary-name-request","language":"txt","children":["$","$La",null,{"children":"getPrimaryNameRequest"}]}]," method allows you to verify if a primary name request exists and its status. Use this to:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Verify if your request is pending"}],"\n",["$","li",null,{"children":"Check if someone has requested to use your ANT's name"}],"\n",["$","li",null,{"children":"Build UI flows around the request/approval process"}],"\n"]}],"\n",["$","$Lb",null,{"title":"Get Primary Name Request","children":[["$","$Lc",null,{"language":"typescript","code":"const { ARIO } = require('@ar.io/sdk')\n\nasync function main() {\n  const ario = ARIO.init()\n\n  const request = await ario.getPrimaryNameRequest({\n    initiator: 'WALLET-ADDRESS', // The wallet address that made the request\n  })\n\n  console.log(request)\n  // Example response:\n  // {\n  //   \"initiator\": \"WALLET-ADDRESS\",\n  //   \"name\": \"arns\",\n  //   \"startTimestamp\": 1728067635857,\n  //   \"endTimestamp\": 1735843635857\n  // }\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$f"}],"title":"NodeJS"}],["$","$Lc",null,{"language":"typescript","code":"import { ARIO } from '@ar.io/sdk/web'\n\nasync function main() {\n  const ario = ARIO.init()\n\n  const request = await ario.getPrimaryNameRequest({\n    initiator: 'WALLET-ADDRESS', // The wallet address that made the request\n  })\n\n  console.log(request)\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$10"}],"title":"Web"}]]}],"\n",["$","h3",null,{"children":"Approving a Primary Name Request"}],"\n",["$","p",null,{"children":["The ANT owner must approve any requests to use their name as a primary name using the ",["$","$L8",null,{"href":"/ar-io-sdk/ants/approve-primary-name-request","language":"txt","children":["$","$La",null,{"children":"approvePrimaryNameRequest"}]}]," method. This gives ANT owners control over how their names are used as identifiers."]}],"\n",["$","$Lb",null,{"title":"Approve Primary Name","children":[["$","$Lc",null,{"language":"typescript","code":"const fs = require('fs')\nconst { ANT, ArweaveSigner } = require('@ar.io/sdk')\n\nasync function main() {\n  const jwk = JSON.parse(fs.readFileSync('KeyFile.json'))\n  const ant = ANT.init({\n    signer: new ArweaveSigner(jwk),\n    processId: 'ANT-PROCESS-ID',\n  })\n\n  const { id: txId } = await ant.approvePrimaryNameRequest({\n    name: 'my-arns-name',\n    address: 'WALLET-ADDRESS',\n    ioProcessId: 'ARIO-PROCESS-ID',\n  })\n\n  console.log(`Primary name request approved: ${txId}`)\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$11"}],"title":"NodeJS"}],["$","$Lc",null,{"language":"typescript","code":"import { ANT, ArConnectSigner } from '@ar.io/sdk/web'\n\nasync function main() {\n  const ant = ANT.init({\n    signer: new ArConnectSigner(window.arweaveWallet),\n    processId: 'ANT-PROCESS-ID',\n  })\n\n  const { id: txId } = await ant.approvePrimaryNameRequest({\n    name: 'my-arns-name',\n    address: 'WALLET-ADDRESS',\n    ioProcessId: 'ARIO-PROCESS-ID',\n  })\n\n  console.log(`Primary name request approved: ${txId}`)\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$12"}],"title":"Web"}]]}],"\n",["$","$L7",null,{"level":2,"id":"querying-primary-names","children":"Querying Primary Names"}],"\n",["$","p",null,{"children":"The AR.IO SDK provides several methods to query primary names, each serving different use cases:"}],"\n",["$","h3",null,{"children":"Get a Single Primary Name"}],"\n",["$","p",null,{"children":["Use ",["$","$L8",null,{"href":"/ar-io-sdk/primary-names/get-primary-name","language":"txt","children":["$","$La",null,{"children":"getPrimaryName"}]}]," when you need to find the primary name for a specific wallet address. This is particularly useful in applications where you want to display a user-friendly identifier instead of their wallet address."]}],"\n",["$","p",null,{"children":"Common use cases:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Displaying a user's primary name in a profile or dashboard"}],"\n",["$","li",null,{"children":"Showing who authored a piece of content"}],"\n",["$","li",null,{"children":"Making transaction histories more readable"}],"\n"]}],"\n",["$","$Lb",null,{"title":"Get Primary Name","children":[["$","$Lc",null,{"language":"typescript","code":"const { ARIO } = require('@ar.io/sdk')\n\nasync function main() {\n  const ario = ARIO.init()\n\n  const primaryName = await ario.getPrimaryName({\n    name: 'my-arns-name',\n  })\n\n  console.log(primaryName)\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$13"}],"title":"NodeJS"}],["$","$Lc",null,{"language":"typescript","code":"import { ARIO } from '@ar.io/sdk/web'\n\nasync function main() {\n  const ario = ARIO.init()\n\n  const primaryName = await ario.getPrimaryName({\n    name: 'my-arns-name',\n  })\n\n  console.log(primaryName)\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$14"}],"title":"Web"}]]}],"\n",["$","h3",null,{"children":"List All Primary Names"}],"\n",["$","p",null,{"children":["Use ",["$","$L8",null,{"href":"/ar-io-sdk/primary-names/get-primary-names","language":"txt","children":["$","$La",null,{"children":"getPrimaryNames"}]}]," when fetching all primary names. This is useful when you need to:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Build a directory of users"}],"\n",["$","li",null,{"children":"Create search functionality"}],"\n",["$","li",null,{"children":"Display multiple users in a more readable format"}],"\n",["$","li",null,{"children":"Map multiple wallet addresses to their friendly names at once"}],"\n"]}],"\n",["$","p",null,{"children":"The method supports pagination through a cursor-based system, where the cursor is the last name from your previous request."}],"\n",["$","$Lb",null,{"title":"Get Primary Names","children":[["$","$Lc",null,{"language":"typescript","code":"const { ARIO } = require('@ar.io/sdk')\n\nasync function main() {\n  const ario = ARIO.init()\n\n  // First page of results\n  const firstPage = await ario.getPrimaryNames({\n    limit: 10,\n    sortBy: 'startTimestamp',\n    sortOrder: 'desc',\n  })\n\n  console.log('First page:', firstPage.items)\n\n  if (firstPage.hasMore) {\n    // Get next page using the cursor from previous response\n    const nextPage = await ario.getPrimaryNames({\n      cursor: firstPage.cursor, // Last name from previous request\n      limit: 10,\n      sortBy: 'startTimestamp',\n      sortOrder: 'desc',\n    })\n\n    console.log('Next page:', nextPage.items)\n  }\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$15"}],"title":"NodeJS"}],["$","$Lc",null,{"language":"typescript","code":"import { ARIO } from '@ar.io/sdk/web'\n\nasync function main() {\n  const ario = ARIO.init()\n\n  // First page of results\n  const firstPage = await ario.getPrimaryNames({\n    limit: 10,\n    sortBy: 'startTimestamp',\n    sortOrder: 'desc',\n  })\n\n  console.log('First page:', firstPage.items)\n\n  if (firstPage.hasMore) {\n    // Get next page using the cursor from previous response\n    const nextPage = await ario.getPrimaryNames({\n      cursor: firstPage.cursor, // Last name from previous request\n      limit: 10,\n      sortBy: 'startTimestamp',\n      sortOrder: 'desc',\n    })\n\n    console.log('Next page:', nextPage.items)\n  }\n}\n\nmain()\n","children":["$","$La",null,{"className":"language-typescript","children":"$16"}],"title":"Web"}]]}],"\n",["$","p",null,{"children":"The response includes:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":[["$","$La",null,{"children":"items"}],": Array of primary names for the current page"]}],"\n",["$","li",null,{"language":"txt","children":[["$","$La",null,{"children":"cursor"}],": The last name from the current request, used for getting the next page"]}],"\n",["$","li",null,{"language":"txt","children":[["$","$La",null,{"children":"hasMore"}],": Boolean indicating if there are more results available"]}],"\n",["$","li",null,{"language":"txt","children":[["$","$La",null,{"children":"totalItems"}],": Total number of primary names matching your query"]}],"\n"]}],"\n",["$","$L7",null,{"level":2,"id":"best-practices","children":"Best Practices"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Always verify ownership of both the ArNS name and ANT before attempting to set a primary name"}],"\n",["$","li",null,{"children":"Check if a primary name request already exists before submitting a new one"}],"\n",["$","li",null,{"children":"Consider implementing error handling for cases where the name or ANT doesn't exist"}],"\n",["$","li",null,{"children":"When displaying primary names in your application, always have a fallback to show the wallet address if no primary name exists"}],"\n"]}],"\n",["$","div",null,{"className":"my-6 flex gap-2.5 rounded-2xl border border-emerald-500/20 bg-emerald-50/50 p-4 leading-6 text-emerald-900 dark:border-emerald-500/30 dark:bg-emerald-500/5 dark:text-emerald-200 dark:[--tw-prose-links-hover:theme(colors.emerald.300)] dark:[--tw-prose-links:theme(colors.white)]","children":[["$","svg",null,{"viewBox":"0 0 16 16","aria-hidden":"true","className":"mt-1 h-4 w-4 flex-none fill-emerald-500 stroke-white dark:fill-emerald-200/20 dark:stroke-emerald-200","children":[["$","circle",null,{"cx":"8","cy":"8","r":"8","strokeWidth":"0"}],["$","path",null,{"fill":"none","strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"1.5","d":"M6.75 7.75h1.5v3.5"}],["$","circle",null,{"cx":"8","cy":"4","r":".5","fill":"none"}]]}],["$","div",null,{"className":"[&>:first-child]:mt-0 [&>:last-child]:mb-0","children":["$","p",null,{"children":"Primary names simplify user identification across the permaweb by replacing\ncomplex wallet addresses with human-readable names, similar to how usernames\nwork on social platforms."}]}]]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L17",null,{}]}]]}],null,["$","$L18",null,{"children":["$L19","$L1a",["$","$L1b",null,{"promise":"$@1c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","5lKYiaK3z5jii_zr4yBQsv",{"children":[["$","$L1d",null,{"children":"$L1e"}],null]}],["$","$L1f",null,{"children":"$L20"}]]}],false]],"m":"$undefined","G":["$21","$undefined"],"s":false,"S":true}
22:"$Sreact.suspense"
23:I[74911,[],"AsyncMetadata"]
20:["$","div",null,{"hidden":true,"children":["$","$22",null,{"fallback":null,"children":["$","$L23",null,{"promise":"$@24"}]}]}]
1a:null
1e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
19:null
1c:{"metadata":[["$","title","0",{"children":"Managing Primary Names - AR.IO Docs"}],["$","meta","1",{"name":"description","content":"Learn how to request, approve, and manage primary names for ANTs"}],["$","meta","2",{"property":"og:title","content":"Managing Primary Names"}],["$","meta","3",{"property":"og:description","content":"Learn how to request, approve, and manage primary names for ANTs"}],["$","meta","4",{"name":"twitter:card","content":"summary"}],["$","meta","5",{"name":"twitter:title","content":"Managing Primary Names"}],["$","meta","6",{"name":"twitter:description","content":"Learn how to request, approve, and manage primary names for ANTs"}],["$","link","7",{"rel":"icon","href":"/docs-v2/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
24:{"metadata":"$1c:metadata","error":null,"digest":"$undefined"}
