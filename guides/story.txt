1:"$Sreact.fragment"
2:I[60881,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","3758","static/chunks/3758-69daa9d9751a2510.js","7066","static/chunks/7066-9ea237f8271c6a3e.js","7948","static/chunks/7948-fe33dfc7f94c2ca6.js","7177","static/chunks/app/layout-d3da4a5b54db3e28.js"],"Providers"]
3:I[41056,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","3758","static/chunks/3758-69daa9d9751a2510.js","7066","static/chunks/7066-9ea237f8271c6a3e.js","7948","static/chunks/7948-fe33dfc7f94c2ca6.js","7177","static/chunks/app/layout-d3da4a5b54db3e28.js"],"Layout"]
4:I[87555,[],""]
5:I[31295,[],""]
6:I[30122,["3975","static/chunks/3975-65073ecd7686b488.js","4345","static/chunks/app/not-found-28cf6d37da7270ee.js"],"default"]
7:I[87254,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","2984","static/chunks/app/guides/story/page-49097595eb674ebb.js"],"Heading"]
8:I[60445,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","2984","static/chunks/app/guides/story/page-49097595eb674ebb.js"],"default"]
9:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","2984","static/chunks/app/guides/story/page-49097595eb674ebb.js"],"Code"]
a:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","2984","static/chunks/app/guides/story/page-49097595eb674ebb.js"],"Pre"]
b:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","2984","static/chunks/app/guides/story/page-49097595eb674ebb.js"],"CodeGroup"]
16:I[73019,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","2984","static/chunks/app/guides/story/page-49097595eb674ebb.js"],"Feedback"]
17:I[59665,[],"OutletBoundary"]
1a:I[74911,[],"AsyncMetadataOutlet"]
1c:I[59665,[],"ViewportBoundary"]
1e:I[59665,[],"MetadataBoundary"]
20:I[26614,[],""]
:HL["/docs-v2/_next/static/css/79a0b2a497090510.css","style"]
c:T400,<span><span style="color: var(--shiki-token-function)">npm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@ardrive/turbo-sdk</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@story-protocol/core-sdk</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">viem</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">dotenv</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">ts-node</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">typescript</span></span>
<span></span>d:Tacd,<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;compilerOptions&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;target&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;es2020&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;module&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;commonjs&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;esModuleInterop&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;forceConsistentCasingInFileNames&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;strict&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;skipLibCheck&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>e:T7d5,import { TurboFactory, TurboAuthenticatedClient } from "@ardrive/turbo-sdk";
import { StoryClient, StoryConfig } from "@story-protocol/core-sdk";
import { http } from "viem";
import { Account, privateKeyToAccount, Address } from "viem/accounts";
import fs from 'fs';
import path from 'path';
import 'dotenv/config';

// --- Environment Variable Loading ---
const privateKeyEnv = process.env.WALLET_PRIVATE_KEY;
const rpcProviderUrlEnv = process.env.RPC_PROVIDER_URL;
const walletPath = path.resolve(process.cwd(), 'wallet.json'); // Assumes wallet.json is in the project root

// --- Validations ---
if (!privateKeyEnv) {
  throw new Error("WALLET_PRIVATE_KEY is not set in the .env file");
}
if (!rpcProviderUrlEnv) {
  throw new Error("RPC_PROVIDER_URL is not set in the .env file");
}
if (!fs.existsSync(walletPath)) {
    throw new Error(`Arweave wallet file not found at ${walletPath}. Please ensure wallet.json exists in the project root.`);
}

// --- ArDrive Turbo Client Setup ---
function parseWallet(filePath: string): any {
    try {
        const walletData = fs.readFileSync(filePath, 'utf8');
        return JSON.parse(walletData);
    } catch (error) {
        console.error(`Error reading or parsing wallet file at ${filePath}:`, error);
        throw new Error(`Failed to load Arweave wallet. Ensure ${filePath} exists and is valid JSON.`);
    }
}

const arweaveWallet = parseWallet(walletPath);

export const turboClient: TurboAuthenticatedClient = TurboFactory.authenticated({
    privateKey: arweaveWallet,
});
console.log("ArDrive Turbo Client initialized.");

// --- Story Protocol Client Setup ---
const storyPrivateKey: Address = `0x${privateKeyEnv}`;
const storyAccount: Account = privateKeyToAccount(storyPrivateKey);

const storyConfig: StoryConfig = {
  account: storyAccount,
  transport: http(rpcProviderUrlEnv),
  chainId: "aeneid", // Adjust chainId if necessary
};

export const storyClient = StoryClient.newClient(storyConfig);
console.log("Story Client initialized.");
f:T4c64,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { TurboFactory</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> TurboAuthenticatedClient } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@ardrive/turbo-sdk&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { StoryClient</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> StoryConfig } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@story-protocol/core-sdk&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { http } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;viem&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Account</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> privateKeyToAccount</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> Address } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;viem/accounts&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> fs </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> path </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;path&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;dotenv/config&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// --- Environment Variable Loading ---</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">privateKeyEnv</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">WALLET_PRIVATE_KEY</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rpcProviderUrlEnv</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">RPC_PROVIDER_URL</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">walletPath</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-token-function)">.cwd</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;wallet.json&#39;</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// Assumes wallet.json is in the project root</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// --- Validations ---</span></span>
<span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">privateKeyEnv) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;WALLET_PRIVATE_KEY is not set in the .env file&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">rpcProviderUrlEnv) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;RPC_PROVIDER_URL is not set in the .env file&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.existsSync</span><span style="color: var(--shiki-color-text)">(walletPath)) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Arweave wallet file not found at </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">walletPath</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">. Please ensure wallet.json exists in the project root.`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// --- ArDrive Turbo Client Setup ---</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseWallet</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">walletData</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(walletData);</span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Error reading or parsing wallet file at </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">filePath</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">:`</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Failed to load Arweave wallet. Ensure </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">filePath</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> exists and is valid JSON.`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">arweaveWallet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseWallet</span><span style="color: var(--shiki-color-text)">(walletPath);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">turboClient</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TurboAuthenticatedClient</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">TurboFactory</span><span style="color: var(--shiki-token-function)">.authenticated</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    privateKey</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> arweaveWallet</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;ArDrive Turbo Client initialized.&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// --- Story Protocol Client Setup ---</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyPrivateKey</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`0x</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">privateKeyEnv</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyAccount</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Account</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">privateKeyToAccount</span><span style="color: var(--shiki-color-text)">(storyPrivateKey);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyConfig</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StoryConfig</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  account</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> storyAccount</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  transport</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">http</span><span style="color: var(--shiki-color-text)">(rpcProviderUrlEnv)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  chainId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;aeneid&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Adjust chainId if necessary</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyClient</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">StoryClient</span><span style="color: var(--shiki-token-function)">.newClient</span><span style="color: var(--shiki-color-text)">(storyConfig);</span></span>
<span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Story Client initialized.&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>10:T109a,import { storyClient, turboClient } from "./utils/clients";
import { createHash } from "crypto";
import { Address } from "viem";
import type { UploadResult } from "@ardrive/turbo-sdk";

// Helper function to upload JSON to Arweave via Turbo
async function uploadJSONToArweave(jsonData: any, description: string): Promise<UploadResult> {
    const dataBuffer = Buffer.from(JSON.stringify(jsonData));
    console.log(`Uploading ${description} (${dataBuffer.byteLength} bytes) to Arweave via Turbo...`);

    const tags = [
        { name: "Content-Type", value: "application/json" },
        { name: "App-Name", value: "ArDrive-Story-Tutorial" } // Example tag
    ];

    try {
        // Use Turbo to upload the file buffer
        const result = await turboClient.uploadFile(dataBuffer, { tags });
        console.log(`${description} uploaded successfully: Transaction ID ${result.id}`);
        return result;
    } catch (error) {
        console.error(`Error uploading ${description} to Arweave:`, error);
        throw new Error(`Arweave upload failed for ${description}.`);
    }
}

async function register() {
  // --- Step 1: Define IP Metadata ---
  const ipMetadata = {
    title: "My Arweave-Powered IP",
    description: "An example IP asset with metadata stored permanently on Arweave via Turbo.",
    // Add other required fields like image, creators, etc.
    // Example creator:
    creators: [
      { name: "Your Name/Org", address: storyClient.account.address, contributionPercent: 100 },
    ],
  };
  console.log("IP Metadata defined.");

  const nftMetadata = {
    name: "Ownership NFT for My Arweave IP",
    description: "This NFT represents ownership of the IP Asset whose metadata is on Arweave.",
    // Add other fields like image
  };
  console.log("NFT Metadata defined.");

  // --- Step 2: Upload Metadata to Arweave ---
  const ipUploadResult = await uploadJSONToArweave(ipMetadata, "IP Metadata");
  const nftUploadResult = await uploadJSONToArweave(nftMetadata, "NFT Metadata");

  // Use arweave.net URLs instead of ar:// protocol
  const ipMetadataArweaveURI = `https://arweave.net/${ipUploadResult.id}`;
  const nftMetadataArweaveURI = `https://arweave.net/${nftUploadResult.id}`;

  console.log(`IP Metadata Arweave URI: ${ipMetadataArweaveURI}`);
  console.log(`NFT Metadata Arweave URI: ${nftMetadataArweaveURI}`);

  // Calculate metadata hashes (required by Story Protocol)
  const ipMetadataHash = `0x${createHash("sha256")
    .update(JSON.stringify(ipMetadata))
    .digest("hex")}`;
  const nftMetadataHash = `0x${createHash("sha256")
    .update(JSON.stringify(nftMetadata))
    .digest("hex")}`;

  console.log(`IP Metadata Hash: ${ipMetadataHash}`);
  console.log(`NFT Metadata Hash: ${nftMetadataHash}`);

  // --- Step 3: Register IP on Story Protocol ---
  console.log("Registering IP Asset on Story Protocol...");

  // Choose an SPG NFT contract (Story Protocol Governed NFT)
  // Use a public testnet one or create your own (see Story docs)
  const spgNftContract: Address = "0xc32A8a0FF3beDDDa58393d022aF433e78739FAbc"; // Aeneid testnet example

  try {
    const response = await storyClient.ipAsset.mintAndRegisterIp({
      spgNftContract: spgNftContract,
      ipMetadata: {
        ipMetadataURI: ipMetadataArweaveURI,      // URI pointing to Arweave
        ipMetadataHash: ipMetadataHash as Address, // Content hash
        nftMetadataURI: nftMetadataArweaveURI,     // URI pointing to Arweave
        nftMetadataHash: nftMetadataHash as Address // Content hash
      },
      txOptions: { waitForTransaction: true }, // Wait for confirmation
    });

    console.log(
      `Successfully registered IP Asset!`
    );
    console.log(`  Transaction Hash: ${response.txHash}`);
    console.log(`  IP ID: ${response.ipId}`);
    console.log(`  Story Explorer Link: https://aeneid.explorer.story.foundation/ipa/${response.ipId}`); // Adjust explorer link for different networks
    console.log(`  IP Metadata (Arweave): ${ipMetadataArweaveURI}`);
    console.log(`  NFT Metadata (Arweave): ${nftMetadataArweaveURI}`);

  } catch (error) {
    console.error("Error registering IP Asset on Story Protocol:", error);
  }
}

// Execute the register function
register().catch(console.error);
11:T9546,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { storyClient</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> turboClient } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./utils/clients&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { createHash } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;crypto&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Address } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;viem&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> { UploadResult } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@ardrive/turbo-sdk&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Helper function to upload JSON to Arweave via Turbo</span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">uploadJSONToArweave</span><span style="color: var(--shiki-color-text)">(jsonData</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> description</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Promise</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">UploadResult</span><span style="color: var(--shiki-color-text)">&gt; {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dataBuffer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Buffer</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(jsonData));</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Uploading </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> (</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">dataBuffer</span><span style="color: var(--shiki-color-text)">.byteLength</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> bytes) to Arweave via Turbo...`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tags</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span><span style="color: var(--shiki-color-text)">        { name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Content-Type&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;application/json&quot;</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        { name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;App-Name&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;ArDrive-Story-Tutorial&quot;</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-comment)">// Example tag</span></span>
<span><span style="color: var(--shiki-color-text)">    ];</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// Use Turbo to upload the file buffer</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">turboClient</span><span style="color: var(--shiki-token-function)">.uploadFile</span><span style="color: var(--shiki-color-text)">(dataBuffer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> { tags });</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> uploaded successfully: Transaction ID </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Error uploading </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> to Arweave:`</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Arweave upload failed for </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">.`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">register</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// --- Step 1: Define IP Metadata ---</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ipMetadata</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    title</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;My Arweave-Powered IP&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    description</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;An example IP asset with metadata stored permanently on Arweave via Turbo.&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Add other required fields like image, creators, etc.</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Example creator:</span></span>
<span><span style="color: var(--shiki-color-text)">    creators</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span><span style="color: var(--shiki-color-text)">      { name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Your Name/Org&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyClient</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">account</span><span style="color: var(--shiki-color-text)">.address</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> contributionPercent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  };</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;IP Metadata defined.&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nftMetadata</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Ownership NFT for My Arweave IP&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    description</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;This NFT represents ownership of the IP Asset whose metadata is on Arweave.&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Add other fields like image</span></span>
<span><span style="color: var(--shiki-color-text)">  };</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;NFT Metadata defined.&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// --- Step 2: Upload Metadata to Arweave ---</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ipUploadResult</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">uploadJSONToArweave</span><span style="color: var(--shiki-color-text)">(ipMetadata</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;IP Metadata&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nftUploadResult</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">uploadJSONToArweave</span><span style="color: var(--shiki-color-text)">(nftMetadata</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;NFT Metadata&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Use arweave.net URLs instead of ar:// protocol</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ipMetadataArweaveURI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`https://arweave.net/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">ipUploadResult</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nftMetadataArweaveURI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`https://arweave.net/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">nftUploadResult</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`IP Metadata Arweave URI: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">ipMetadataArweaveURI</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`NFT Metadata Arweave URI: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">nftMetadataArweaveURI</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Calculate metadata hashes (required by Story Protocol)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ipMetadataHash</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`0x</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">createHash</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;sha256&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(ipMetadata))</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.digest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;hex&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nftMetadataHash</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`0x</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">createHash</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;sha256&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(nftMetadata))</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.digest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;hex&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`IP Metadata Hash: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">ipMetadataHash</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`NFT Metadata Hash: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">nftMetadataHash</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// --- Step 3: Register IP on Story Protocol ---</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Registering IP Asset on Story Protocol...&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Choose an SPG NFT contract (Story Protocol Governed NFT)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Use a public testnet one or create your own (see Story docs)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spgNftContract</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0xc32A8a0FF3beDDDa58393d022aF433e78739FAbc&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Aeneid testnet example</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyClient</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">ipAsset</span><span style="color: var(--shiki-token-function)">.mintAndRegisterIp</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      spgNftContract</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> spgNftContract</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      ipMetadata</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        ipMetadataURI</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> ipMetadataArweaveURI</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// URI pointing to Arweave</span></span>
<span><span style="color: var(--shiki-color-text)">        ipMetadataHash</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> ipMetadataHash </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Content hash</span></span>
<span><span style="color: var(--shiki-color-text)">        nftMetadataURI</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> nftMetadataArweaveURI</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-comment)">// URI pointing to Arweave</span></span>
<span><span style="color: var(--shiki-color-text)">        nftMetadataHash</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> nftMetadataHash </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Content hash</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      txOptions</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { waitForTransaction</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Wait for confirmation</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">`Successfully registered IP Asset!`</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Transaction Hash: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.txHash</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  IP ID: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.ipId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Story Explorer Link: https://aeneid.explorer.story.foundation/ipa/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.ipId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// Adjust explorer link for different networks</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  IP Metadata (Arweave): </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">ipMetadataArweaveURI</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  NFT Metadata (Arweave): </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">nftMetadataArweaveURI</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Error registering IP Asset on Story Protocol:&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Execute the register function</span></span>
<span><span style="color: var(--shiki-token-function)">register</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-color-text)">.error);</span></span>
<span></span>12:T5b2,import { storyClient } from "./utils/clients";
import { Address } from "viem";

// Assume these values are known for the IP Asset you want to license
const LICENSOR_IP_ID: Address = "0x..."; // Replace with the actual IP ID of the asset
const LICENSE_TERMS_ID: string = "..."; // Replace with the specific terms ID attached to the IP Asset
const RECEIVER_ADDRESS: Address = "0x..."; // Address to receive the license token(s)

async function mintLicense() {
  console.log(`Minting license token(s) for IP ID ${LICENSOR_IP_ID} under terms ${LICENSE_TERMS_ID}...`);

  try {
    const response = await storyClient.license.mintLicenseTokens({
      licenseTermsId: LICENSE_TERMS_ID,
      licensorIpId: LICENSOR_IP_ID,
      receiver: RECEIVER_ADDRESS,
      amount: 1, // Number of license tokens to mint
      // Optional parameters:
      // maxMintingFee: BigInt(0), // Set if the terms have a fee; 0 disables check if no fee expected
      // maxRevenueShare: 100, // Default check for revenue share percentage
      txOptions: { waitForTransaction: true },
    });

    console.log(
      `Successfully minted license token(s)!`
    );
    console.log(`  Transaction Hash: ${response.txHash}`);
    console.log(`  License Token ID(s): ${response.licenseTokenIds}`);

  } catch (error) {
    console.error("Error minting license token(s):", error);
  }
}

// Execute the function (after updating the constants above)
// mintLicense().catch(console.error);
13:T2b67,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { storyClient } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./utils/clients&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Address } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;viem&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Assume these values are known for the IP Asset you want to license</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">LICENSOR_IP_ID</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0x...&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Replace with the actual IP ID of the asset</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">LICENSE_TERMS_ID</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;...&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Replace with the specific terms ID attached to the IP Asset</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">RECEIVER_ADDRESS</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0x...&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Address to receive the license token(s)</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mintLicense</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Minting license token(s) for IP ID </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">LICENSOR_IP_ID</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> under terms </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">LICENSE_TERMS_ID</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">...`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyClient</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">license</span><span style="color: var(--shiki-token-function)">.mintLicenseTokens</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      licenseTermsId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">LICENSE_TERMS_ID</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      licensorIpId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">LICENSOR_IP_ID</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      receiver</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">RECEIVER_ADDRESS</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      amount</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Number of license tokens to mint</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Optional parameters:</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// maxMintingFee: BigInt(0), // Set if the terms have a fee; 0 disables check if no fee expected</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// maxRevenueShare: 100, // Default check for revenue share percentage</span></span>
<span><span style="color: var(--shiki-color-text)">      txOptions</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { waitForTransaction</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">`Successfully minted license token(s)!`</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Transaction Hash: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.txHash</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  License Token ID(s): </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.licenseTokenIds</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Error minting license token(s):&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Execute the function (after updating the constants above)</span></span>
<span><span style="color: var(--shiki-token-comment)">// mintLicense().catch(console.error);</span></span>
<span></span>14:T1289,import { storyClient, turboClient } from "./utils/clients";
import { createHash } from "crypto";
import { Address } from "viem";
import type { UploadResult } from "@ardrive/turbo-sdk";
import { DerivativeData } from "@story-protocol/core-sdk";

// Helper function to upload JSON to Arweave via Turbo (same as in registerIpWithArweave.ts)
async function uploadJSONToArweave(jsonData: any, description: string): Promise<UploadResult> {
    const dataBuffer = Buffer.from(JSON.stringify(jsonData));
    console.log(`Uploading ${description} (${dataBuffer.byteLength} bytes) to Arweave via Turbo...`);

    const tags = [
        { name: "Content-Type", value: "application/json" },
        { name: "App-Name", value: "ArDrive-Story-Tutorial" }
    ];

    try {
        const result = await turboClient.uploadFile(dataBuffer, { tags });
        console.log(`${description} uploaded successfully: Transaction ID ${result.id}`);
        return result;
    } catch (error) {
        console.error(`Error uploading ${description} to Arweave:`, error);
        throw new Error(`Arweave upload failed for ${description}.`);
    }
}

// --- Information about the Parent IP and License ---
const PARENT_IP_ID: Address = "0x..."; // Replace with the actual Parent IP ID
const LICENSE_TERMS_ID: string = "..."; // Replace with the License Terms ID to derive under

async function registerDerivative() {
  // --- Step 1: Define Derivative Metadata ---
  const derivativeIpMetadata = {
    title: "My Derivative Work (Arweave Metadata)",
    description: "A remix/adaptation based on a parent IP, metadata on Arweave.",
    // Add other required fields (image, creators matching the derivative creator, etc.)
  };

  const derivativeNftMetadata = {
    name: "Ownership NFT for My Derivative Work",
    description: "NFT for the derivative IP, metadata on Arweave.",
    // Add other fields
  };

  // --- Step 2: Upload Derivative Metadata to Arweave ---
  console.log("Uploading derivative metadata to Arweave via Turbo...");
  const derivIpUploadResult = await uploadJSONToArweave(derivativeIpMetadata, "Derivative IP Metadata");
  const derivNftUploadResult = await uploadJSONToArweave(derivativeNftMetadata, "Derivative NFT Metadata");

  // Use arweave.net URLs instead of ar:// protocol
  const derivIpMetadataArweaveURI = `https://arweave.net/${derivIpUploadResult.id}`;
  const derivNftMetadataArweaveURI = `https://arweave.net/${derivNftUploadResult.id}`;

  const derivIpMetadataHash = `0x${createHash("sha256")
    .update(JSON.stringify(derivativeIpMetadata))
    .digest("hex")}`;
  const derivNftMetadataHash = `0x${createHash("sha256")
    .update(JSON.stringify(derivativeNftMetadata))
    .digest("hex")}`;

  console.log(`Derivative IP Metadata Arweave URI: ${derivIpMetadataArweaveURI}`);
  console.log(`Derivative NFT Metadata Arweave URI: ${derivNftMetadataArweaveURI}`);

  // --- Step 3: Register Derivative on Story Protocol ---
  // Prepare Derivative Data for Story Protocol
  const derivData: DerivativeData = {
    parentIpIds: [PARENT_IP_ID],
    licenseTermsIds: [LICENSE_TERMS_ID],
  };

  console.log("Registering Derivative IP Asset on Story Protocol...");

  // Use the same SPG NFT contract or your own
  const spgNftContract: Address = "0xc32A8a0FF3beDDDa58393d022aF433e78739FAbc"; // Aeneid testnet example

  try {
    const response = await storyClient.ipAsset.mintAndRegisterIpAndMakeDerivative({
      spgNftContract: spgNftContract,
      derivData: derivData, // Link to parent IP and license terms
      ipMetadata: { // Metadata for the *new* derivative IP
        ipMetadataURI: derivIpMetadataArweaveURI,      // Arweave URI
        ipMetadataHash: derivIpMetadataHash as Address, // Content hash
        nftMetadataURI: derivNftMetadataArweaveURI,     // Arweave URI
        nftMetadataHash: derivNftMetadataHash as Address // Content hash
      },
      txOptions: { waitForTransaction: true },
    });

    console.log(
      `Successfully registered Derivative IP Asset!`
    );
    console.log(`  Transaction Hash: ${response.txHash}`);
    console.log(`  Derivative IP ID: ${response.ipId}`);
    console.log(`  Derivative Token ID: ${response.tokenId}`);
    console.log(`  Story Explorer Link: https://aeneid.explorer.story.foundation/ipa/${response.ipId}`);
    console.log(`  Derivative Metadata (Arweave): ${derivIpMetadataArweaveURI}`);

  } catch (error) {
    console.error("Error registering derivative IP Asset on Story Protocol:", error);
  }
}

// Before running this script:
// 1. Replace PARENT_IP_ID with a real IP ID you have access to
// 2. Replace LICENSE_TERMS_ID with the actual license terms ID
// Then uncomment the line below to execute
// registerDerivative().catch(console.error);
15:T9754,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { storyClient</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> turboClient } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./utils/clients&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { createHash } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;crypto&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Address } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;viem&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> { UploadResult } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@ardrive/turbo-sdk&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { DerivativeData } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@story-protocol/core-sdk&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Helper function to upload JSON to Arweave via Turbo (same as in registerIpWithArweave.ts)</span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">uploadJSONToArweave</span><span style="color: var(--shiki-color-text)">(jsonData</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> description</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Promise</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">UploadResult</span><span style="color: var(--shiki-color-text)">&gt; {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dataBuffer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Buffer</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(jsonData));</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Uploading </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> (</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">dataBuffer</span><span style="color: var(--shiki-color-text)">.byteLength</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> bytes) to Arweave via Turbo...`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tags</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span><span style="color: var(--shiki-color-text)">        { name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Content-Type&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;application/json&quot;</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        { name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;App-Name&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;ArDrive-Story-Tutorial&quot;</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span><span style="color: var(--shiki-color-text)">    ];</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">turboClient</span><span style="color: var(--shiki-token-function)">.uploadFile</span><span style="color: var(--shiki-color-text)">(dataBuffer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> { tags });</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> uploaded successfully: Transaction ID </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Error uploading </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> to Arweave:`</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Arweave upload failed for </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">description</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">.`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// --- Information about the Parent IP and License ---</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PARENT_IP_ID</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0x...&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Replace with the actual Parent IP ID</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">LICENSE_TERMS_ID</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;...&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Replace with the License Terms ID to derive under</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">registerDerivative</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// --- Step 1: Define Derivative Metadata ---</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivativeIpMetadata</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    title</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;My Derivative Work (Arweave Metadata)&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    description</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;A remix/adaptation based on a parent IP, metadata on Arweave.&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Add other required fields (image, creators matching the derivative creator, etc.)</span></span>
<span><span style="color: var(--shiki-color-text)">  };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivativeNftMetadata</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Ownership NFT for My Derivative Work&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    description</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;NFT for the derivative IP, metadata on Arweave.&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Add other fields</span></span>
<span><span style="color: var(--shiki-color-text)">  };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// --- Step 2: Upload Derivative Metadata to Arweave ---</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Uploading derivative metadata to Arweave via Turbo...&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivIpUploadResult</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">uploadJSONToArweave</span><span style="color: var(--shiki-color-text)">(derivativeIpMetadata</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Derivative IP Metadata&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivNftUploadResult</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">uploadJSONToArweave</span><span style="color: var(--shiki-color-text)">(derivativeNftMetadata</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Derivative NFT Metadata&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Use arweave.net URLs instead of ar:// protocol</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivIpMetadataArweaveURI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`https://arweave.net/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">derivIpUploadResult</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivNftMetadataArweaveURI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`https://arweave.net/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">derivNftUploadResult</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivIpMetadataHash</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`0x</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">createHash</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;sha256&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(derivativeIpMetadata))</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.digest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;hex&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivNftMetadataHash</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`0x</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">createHash</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;sha256&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(derivativeNftMetadata))</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.digest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;hex&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Derivative IP Metadata Arweave URI: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">derivIpMetadataArweaveURI</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Derivative NFT Metadata Arweave URI: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">derivNftMetadataArweaveURI</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// --- Step 3: Register Derivative on Story Protocol ---</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Prepare Derivative Data for Story Protocol</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">derivData</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DerivativeData</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    parentIpIds</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">PARENT_IP_ID</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    licenseTermsIds</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">LICENSE_TERMS_ID</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Registering Derivative IP Asset on Story Protocol...&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Use the same SPG NFT contract or your own</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spgNftContract</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0xc32A8a0FF3beDDDa58393d022aF433e78739FAbc&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Aeneid testnet example</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">storyClient</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">ipAsset</span><span style="color: var(--shiki-token-function)">.mintAndRegisterIpAndMakeDerivative</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      spgNftContract</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> spgNftContract</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      derivData</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> derivData</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Link to parent IP and license terms</span></span>
<span><span style="color: var(--shiki-color-text)">      ipMetadata</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-comment)">// Metadata for the *new* derivative IP</span></span>
<span><span style="color: var(--shiki-color-text)">        ipMetadataURI</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> derivIpMetadataArweaveURI</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Arweave URI</span></span>
<span><span style="color: var(--shiki-color-text)">        ipMetadataHash</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> derivIpMetadataHash </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Content hash</span></span>
<span><span style="color: var(--shiki-color-text)">        nftMetadataURI</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> derivNftMetadataArweaveURI</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-comment)">// Arweave URI</span></span>
<span><span style="color: var(--shiki-color-text)">        nftMetadataHash</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> derivNftMetadataHash </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Content hash</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      txOptions</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { waitForTransaction</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">`Successfully registered Derivative IP Asset!`</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Transaction Hash: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.txHash</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Derivative IP ID: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.ipId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Derivative Token ID: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.tokenId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Story Explorer Link: https://aeneid.explorer.story.foundation/ipa/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.ipId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`  Derivative Metadata (Arweave): </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">derivIpMetadataArweaveURI</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Error registering derivative IP Asset on Story Protocol:&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Before running this script:</span></span>
<span><span style="color: var(--shiki-token-comment)">// 1. Replace PARENT_IP_ID with a real IP ID you have access to</span></span>
<span><span style="color: var(--shiki-token-comment)">// 2. Replace LICENSE_TERMS_ID with the actual license terms ID</span></span>
<span><span style="color: var(--shiki-token-comment)">// Then uncomment the line below to execute</span></span>
<span><span style="color: var(--shiki-token-comment)">// registerDerivative().catch(console.error);</span></span>
<span></span>0:{"P":null,"b":"NszJttPujm4cqAVSlrMoK","p":"/docs-v2","c":["","guides","story"],"i":false,"f":[[["",{"children":["guides",{"children":["story",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/docs-v2/_next/static/css/79a0b2a497090510.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L2",null,{"children":["$","$L3",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]}]]}],{"children":["guides",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["story",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full w-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose w-full dark:prose-invert","children":[["$","h1",null,{"children":"Registering Story Protocol IP Assets with Arweave Metadata using Turbo"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Utilize the speed and reliability of ArDrive Turbo to store metadata for Story Protocol IP Assets permanently on Arweave."}],"\n"]}],"\n",["$","p",null,{"children":"Story Protocol enables the registration and management of intellectual property (IP) on-chain. A crucial part of this process involves linking metadata to your IP Assets. While various storage solutions exist, Arweave offers permanent, decentralized storage, making it an ideal choice for valuable IP metadata."}],"\n",["$","p",null,{"children":"This guide demonstrates how to use the ArDrive Turbo SDK to efficiently upload IP Asset metadata to Arweave and register it with the Story Protocol TypeScript SDK."}],"\n",["$","$L7",null,{"level":2,"id":"prerequisites","children":"Prerequisites"}],"\n",["$","p",null,{"children":"Before you begin, ensure you have the following:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Node.js:"}]," Version 18 or later. Download from ",["$","$L8",null,{"href":"https://nodejs.org","children":"nodejs.org"}],"."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"npm/pnpm/yarn:"}]," A compatible package manager."]}],"\n",["$","li",null,{"language":"txt","children":[["$","strong",null,{"children":"Arweave Wallet:"}]," A ",["$","$L9",null,{"children":"wallet.json"}]," file. Generate one using tools like the ",["$","$L8",null,{"href":"https://wander.app/","children":"Wander"}]," browser extension. Keep this file secure and ",["$","strong",null,{"children":"do not commit it to version control"}],"."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Turbo Credits:"}]," Your Arweave wallet must be funded with Turbo credits to pay for uploads. Top up at ",["$","$L8",null,{"href":"https://turbo-topup.com","children":"https://turbo-topup.com"}],"."]}],"\n",["$","li",null,{"language":"txt","children":[["$","strong",null,{"children":"Story Protocol Account:"}]," An Ethereum-compatible private key (",["$","$L9",null,{"children":"WALLET_PRIVATE_KEY"}],") and an RPC Provider URL (",["$","$L9",null,{"children":"RPC_PROVIDER_URL"}],") for the desired Story Protocol network (e.g., Aeneid testnet) stored in a ",["$","$L9",null,{"children":".env"}]," file."]}],"\n",["$","li",null,{"language":"txt","children":[["$","strong",null,{"children":"TypeScript Environment:"}]," You'll need to execute TypeScript code, so make sure you have ",["$","$L9",null,{"children":"ts-node"}]," installed globally (",["$","$L9",null,{"children":"npm install -g ts-node"}],") or as a dev dependency."]}],"\n"]}],"\n",["$","$L7",null,{"level":2,"id":"setup","children":"Setup"}],"\n",["$","h3",null,{"children":"1. Install Dependencies"}],"\n",["$","p",null,{"children":"First, set up a new project directory and install the necessary SDKs:"}],"\n",["$","$La",null,{"language":"bash","code":"mkdir story-arweave-project\ncd story-arweave-project\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">mkdir</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">story-arweave-project</span></span>\n<span><span style=\"color: var(--shiki-token-function)\">cd</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">story-arweave-project</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"Then install the required dependencies:"}],"\n",["$","$Lb",null,{"title":"Installation Methods","children":[["$","$La",null,{"language":"bash","code":"npm install --save @ardrive/turbo-sdk @story-protocol/core-sdk viem dotenv ts-node typescript\n","children":["$","$L9",null,{"className":"language-bash","children":"$c"}],"title":"npm"}],["$","$La",null,{"language":"bash","code":"pnpm install @ardrive/turbo-sdk @story-protocol/core-sdk viem dotenv ts-node typescript\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">pnpm</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">install</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">@ardrive/turbo-sdk</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">@story-protocol/core-sdk</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">viem</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">dotenv</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">ts-node</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">typescript</span></span>\n<span></span>"}],"title":"pnpm"}],["$","$La",null,{"language":"bash","code":"yarn add @ardrive/turbo-sdk @story-protocol/core-sdk viem dotenv ts-node typescript\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">yarn</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">add</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">@ardrive/turbo-sdk</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">@story-protocol/core-sdk</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">viem</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">dotenv</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">ts-node</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">typescript</span></span>\n<span></span>"}],"title":"yarn"}]]}],"\n",["$","h3",null,{"children":"2. Project Setup"}],"\n",["$","p",null,{"children":"Create the following files in your project:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"language":"txt","children":[["$","$L9",null,{"children":".env"}]," file (in the project root):"]}],"\n"]}],"\n",["$","$La",null,{"language":"txt","code":"WALLET_PRIVATE_KEY=your_ethereum_private_key_without_0x_prefix\nRPC_PROVIDER_URL=your_ethereum_rpc_provider_url\n","children":["$","$L9",null,{"children":"<span><span style=\"color: undefined\">WALLET_PRIVATE_KEY=your_ethereum_private_key_without_0x_prefix</span></span>\n<span><span style=\"color: undefined\">RPC_PROVIDER_URL=your_ethereum_rpc_provider_url</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}],"\n",["$","ol",null,{"start":"2","children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Place your Arweave ",["$","$L9",null,{"children":"wallet.json"}]," file in the project root."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Create a ",["$","$L9",null,{"children":"tsconfig.json"}]," file in the project root:"]}],"\n"]}],"\n"]}],"\n",["$","$La",null,{"language":"json","code":"{\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  }\n}\n","children":["$","$L9",null,{"className":"language-json","children":"$d"}]}],"\n",["$","h3",null,{"children":"3. Initialize SDK Clients"}],"\n",["$","p",null,{"children":"Create a configuration file to set up and export both the Turbo and Story clients:"}],"\n",["$","$La",null,{"language":"typescript","code":"$e","children":["$","$L9",null,{"className":"language-typescript","children":"$f"}]}],"\n",["$","p",null,{"language":"txt","children":["Make sure to create the ",["$","$L9",null,{"children":"utils"}]," directory first:"]}],"\n",["$","$La",null,{"language":"bash","code":"mkdir -p utils\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">mkdir</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">-p</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">utils</span></span>\n<span></span>"}]}],"\n",["$","$L7",null,{"level":2,"id":"registering-an-ip-asset","children":"Registering an IP Asset"}],"\n",["$","p",null,{"children":"Now, let's create a script to register an IP asset. This involves three steps:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Define metadata for the IP itself and the NFT representing ownership"}],"\n",["$","li",null,{"children":"Upload metadata to Arweave using Turbo"}],"\n",["$","li",null,{"children":"Register the IP on Story Protocol"}],"\n"]}],"\n",["$","p",null,{"children":"Create the following script file:"}],"\n",["$","$La",null,{"language":"typescript","code":"$10","children":["$","$L9",null,{"className":"language-typescript","children":"$11"}]}],"\n",["$","h3",null,{"children":"Run the Registration Script"}],"\n",["$","p",null,{"children":"To execute the script and register your IP Asset:"}],"\n",["$","$La",null,{"language":"bash","code":"npx ts-node registerIpWithArweave.ts\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">npx</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">ts-node</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">registerIpWithArweave.ts</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"This will:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Upload your IP metadata to Arweave permanently"}],"\n",["$","li",null,{"children":"Upload your NFT metadata to Arweave permanently"}],"\n",["$","li",null,{"children":"Register an IP Asset on Story Protocol pointing to these Arweave URLs"}],"\n"]}],"\n",["$","$L7",null,{"level":2,"id":"minting-license-tokens","children":"Minting License Tokens"}],"\n",["$","p",null,{"children":"Once an IP Asset is registered, you can attach license terms and allow others to mint license tokens. Create a new script for this:"}],"\n",["$","$La",null,{"language":"typescript","code":"$12","children":["$","$L9",null,{"className":"language-typescript","children":"$13"}]}],"\n",["$","p",null,{"children":"Before running this script:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Replace ",["$","$L9",null,{"children":"LICENSOR_IP_ID"}]," with the actual IP ID obtained from your registration"]}],"\n",["$","li",null,{"language":"txt","children":["Replace ",["$","$L9",null,{"children":"LICENSE_TERMS_ID"}]," with the ID of license terms attached to that IP"]}],"\n",["$","li",null,{"language":"txt","children":["Replace ",["$","$L9",null,{"children":"RECEIVER_ADDRESS"}]," with the address to receive the license token"]}],"\n",["$","li",null,{"children":"Uncomment the function call at the bottom"}],"\n"]}],"\n",["$","p",null,{"children":"Then run:"}],"\n",["$","$La",null,{"language":"bash","code":"npx ts-node mintLicense.ts\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">npx</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">ts-node</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">mintLicense.ts</span></span>\n<span></span>"}]}],"\n",["$","$L7",null,{"level":2,"id":"registering-derivative-ip-assets-with-arweave-metadata","children":"Registering Derivative IP Assets with Arweave Metadata"}],"\n",["$","p",null,{"children":"Finally, let's create a script to register a derivative work based on an existing IP, also using Arweave for metadata storage:"}],"\n",["$","$La",null,{"language":"typescript","code":"$14","children":["$","$L9",null,{"className":"language-typescript","children":"$15"}]}],"\n",["$","p",null,{"children":"Before running this script:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Replace ",["$","$L9",null,{"children":"PARENT_IP_ID"}]," with the actual parent IP ID"]}],"\n",["$","li",null,{"language":"txt","children":["Replace ",["$","$L9",null,{"children":"LICENSE_TERMS_ID"}]," with the license terms ID that permits derivatives"]}],"\n",["$","li",null,{"children":"Uncomment the function execution at the bottom"}],"\n",["$","li",null,{"children":"Run:"}],"\n"]}],"\n",["$","$La",null,{"language":"bash","code":"npx ts-node registerDerivativeWithArweave.ts\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">npx</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">ts-node</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">registerDerivativeWithArweave.ts</span></span>\n<span></span>"}]}],"\n",["$","$L7",null,{"level":2,"id":"conclusion","children":"Conclusion"}],"\n",["$","p",null,{"children":"By leveraging the ArDrive Turbo SDK, you can seamlessly integrate permanent Arweave storage into your Story Protocol workflow. Uploading metadata with Turbo ensures fast, reliable, and cost-effective data persistence for your valuable IP Assets, whether they are root IPs or complex derivatives with licensing relationships."}],"\n",["$","p",null,{"children":"This tutorial demonstrated a complete workflow:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Setting up a project structure with all required dependencies"}],"\n",["$","li",null,{"children":"Creating a utility module for client initialization"}],"\n",["$","li",null,{"children":"Registering original IP Assets with metadata stored on Arweave"}],"\n",["$","li",null,{"children":"Minting license tokens for IP Assets"}],"\n",["$","li",null,{"children":"Creating and registering derivative works"}],"\n"]}],"\n",["$","p",null,{"children":["For further details on Story Protocol concepts like licensing, derivatives, or specific SDK functions, refer to the ",["$","$L8",null,{"href":"https://docs.story.foundation","children":"Story Protocol Documentation"}],"."]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L16",null,{}]}]]}],null,["$","$L17",null,{"children":["$L18","$L19",["$","$L1a",null,{"promise":"$@1b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","YABiBmjbp25Nq7EaDrmp5v",{"children":[["$","$L1c",null,{"children":"$L1d"}],null]}],["$","$L1e",null,{"children":"$L1f"}]]}],false]],"m":"$undefined","G":["$20","$undefined"],"s":false,"S":true}
21:"$Sreact.suspense"
22:I[74911,[],"AsyncMetadata"]
1f:["$","div",null,{"hidden":true,"children":["$","$21",null,{"fallback":null,"children":["$","$L22",null,{"promise":"$@23"}]}]}]
19:null
1d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
18:null
1b:{"metadata":[["$","title","0",{"children":"Register an IP Asset on Arweave - AR.IO Docs"}],["$","meta","1",{"name":"description","content":"Learn how to register an IP asset on Story Protocol and make it accessible on Arweave"}],["$","link","2",{"rel":"icon","href":"/docs-v2/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
23:{"metadata":"$1b:metadata","error":null,"digest":"$undefined"}
