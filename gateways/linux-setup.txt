1:"$Sreact.fragment"
2:I[60881,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","3758","static/chunks/3758-69daa9d9751a2510.js","7066","static/chunks/7066-9ea237f8271c6a3e.js","7948","static/chunks/7948-c9cb3f663ca6eb49.js","7177","static/chunks/app/layout-d5e20c3ba528e847.js"],"Providers"]
3:I[41056,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","3758","static/chunks/3758-69daa9d9751a2510.js","7066","static/chunks/7066-9ea237f8271c6a3e.js","7948","static/chunks/7948-c9cb3f663ca6eb49.js","7177","static/chunks/app/layout-d5e20c3ba528e847.js"],"Layout"]
4:I[87555,[],""]
5:I[31295,[],""]
6:I[30122,["3975","static/chunks/3975-65073ecd7686b488.js","4345","static/chunks/app/not-found-28cf6d37da7270ee.js"],"default"]
7:I[87254,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","8533","static/chunks/app/gateways/linux-setup/page-e523f639afcf6475.js"],"Heading"]
8:I[60445,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","8533","static/chunks/app/gateways/linux-setup/page-e523f639afcf6475.js"],"default"]
9:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","8533","static/chunks/app/gateways/linux-setup/page-e523f639afcf6475.js"],"CodeGroup"]
a:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","8533","static/chunks/app/gateways/linux-setup/page-e523f639afcf6475.js"],"Pre"]
b:I[81571,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","8533","static/chunks/app/gateways/linux-setup/page-e523f639afcf6475.js"],"Code"]
11:I[73019,["9268","static/chunks/aaea2bcf-432631bb317559fe.js","3975","static/chunks/3975-65073ecd7686b488.js","5227","static/chunks/5227-c718075fe01526db.js","6493","static/chunks/6493-a59dcbabb32c712c.js","465","static/chunks/465-50ec6cceb8e1110d.js","8533","static/chunks/app/gateways/linux-setup/page-e523f639afcf6475.js"],"Feedback"]
12:I[59665,[],"OutletBoundary"]
15:I[74911,[],"AsyncMetadataOutlet"]
17:I[59665,[],"ViewportBoundary"]
19:I[59665,[],"MetadataBoundary"]
1b:I[26614,[],""]
:HL["/docs-v2/_next/static/css/79a0b2a497090510.css","style"]
c:T1498,<span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">apt</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-y</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">apt</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">upgrade</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-y</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">apt</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-y</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">curl</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">openssh-server</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">git</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">certbot</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">nginx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">sqlite3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">build-essential</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">systemctl</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">enable</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">ssh</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curl</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-o-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bash</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">source</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">~/.bashrc</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">ufw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">allow</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">22</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">80</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">443</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">ufw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">enable</span></span>
<span></span>d:T1440,<span><span style="color: var(--shiki-token-comment)"># Add Docker&#39;s official GPG key:</span></span>
<span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">apt-get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">update</span></span>
<span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">apt-get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">ca-certificates</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">curl</span></span>
<span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-m</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0755</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-d</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">/etc/apt/keyrings</span></span>
<span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">curl</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-fsSL</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">https://download.docker.com/linux/ubuntu/gpg</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-o</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">/etc/apt/keyrings/docker.asc</span></span>
<span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">chmod</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">a+r</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">/etc/apt/keyrings/docker.asc</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)"># Add the repository to Apt sources:</span></span>
<span><span style="color: var(--shiki-token-function)">echo</span><span style="color: var(--shiki-color-text)"> \</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;deb [arch=$(</span><span style="color: var(--shiki-token-function)">dpkg</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-string)">--print-architecture</span><span style="color: var(--shiki-token-string-expression)">) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span>
<span><span style="color: var(--shiki-token-string-expression)">  $(</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-string)">/etc/os-release</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-function)">echo</span><span style="color: var(--shiki-token-string-expression)"> &quot;$VERSION_CODENAME&quot;) stable&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> \</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">tee</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">/etc/apt/sources.list.d/docker.list</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">/dev/null</span></span>
<span><span style="color: var(--shiki-token-function)">sudo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">apt-get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">update</span></span>
<span></span>e:T5b4,<span><span style="color: var(--shiki-token-function)">nvm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">20.11</span><span style="color: var(--shiki-token-string)">.1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">nvm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">use</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">20.11</span><span style="color: var(--shiki-token-string)">.1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">npm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-g</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">yarn@1.22.22</span></span>
<span></span>f:T531,<span><span style="color: undefined"># Add Docker&#39;s official GPG key:</span></span>
<span><span style="color: undefined">sudo apt-get update</span></span>
<span><span style="color: undefined">sudo apt-get install ca-certificates curl</span></span>
<span><span style="color: undefined">sudo install -m 0755 -d /etc/apt/keyrings</span></span>
<span><span style="color: undefined">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span></span>
<span><span style="color: undefined">sudo chmod a+r /etc/apt/keyrings/docker.asc</span></span>
<span><span style="color: undefined"></span></span>
<span><span style="color: undefined"># Add the repository to Apt sources:</span></span>
<span><span style="color: undefined">echo \</span></span>
<span><span style="color: undefined">&quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span>
<span><span style="color: undefined">$(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \</span></span>
<span><span style="color: undefined">sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span>
<span><span style="color: undefined">sudo apt-get update</span></span>
<span><span style="color: undefined"></span></span>10:T8fd,<span><span style="color: undefined"># Force redirects from HTTP to HTTPS</span></span>
<span><span style="color: undefined">server {</span></span>
<span><span style="color: undefined">    listen 80;</span></span>
<span><span style="color: undefined">    listen [::]:80;</span></span>
<span><span style="color: undefined">    server_name &lt;your-domain&gt;.com *.&lt;your-domain&gt;.com;</span></span>
<span><span style="color: undefined"></span></span>
<span><span style="color: undefined">    location / {</span></span>
<span><span style="color: undefined">        return 301 https://$host$request_uri;</span></span>
<span><span style="color: undefined">    }</span></span>
<span><span style="color: undefined">}</span></span>
<span><span style="color: undefined"></span></span>
<span><span style="color: undefined"># Forward traffic to your node and provide SSL certificates</span></span>
<span><span style="color: undefined">server {</span></span>
<span><span style="color: undefined">    listen 443 ssl;</span></span>
<span><span style="color: undefined">    listen [::]:443 ssl;</span></span>
<span><span style="color: undefined">    server_name &lt;your-domain&gt;.com *.&lt;your-domain&gt;.com;</span></span>
<span><span style="color: undefined"></span></span>
<span><span style="color: undefined">    ssl_certificate /etc/letsencrypt/live/&lt;your-domain&gt;.com/fullchain.pem;</span></span>
<span><span style="color: undefined">    ssl_certificate_key /etc/letsencrypt/live/&lt;your-domain&gt;.com/privkey.pem;</span></span>
<span><span style="color: undefined"></span></span>
<span><span style="color: undefined">    location / {</span></span>
<span><span style="color: undefined">        proxy_pass http://localhost:3000;</span></span>
<span><span style="color: undefined">        proxy_set_header Host $host;</span></span>
<span><span style="color: undefined">        proxy_set_header X-Real-IP $remote_addr;</span></span>
<span><span style="color: undefined">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span><span style="color: undefined">        proxy_http_version 1.1;</span></span>
<span><span style="color: undefined">    }</span></span>
<span><span style="color: undefined">}</span></span>
<span><span style="color: undefined"></span></span>0:{"P":null,"b":"a9wF8JuOHiRV7rsbGnSm6","p":"/docs-v2","c":["","gateways","linux-setup"],"i":false,"f":[[["",{"children":["gateways",{"children":["linux-setup",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/docs-v2/_next/static/css/79a0b2a497090510.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L2",null,{"children":["$","$L3",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]}]]}],{"children":["gateways",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["linux-setup",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full w-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose w-full dark:prose-invert","children":[["$","h1",null,{"children":"Linux Installation Instructions"}],"\n",["$","$L7",null,{"level":2,"id":"overview","children":"Overview"}],"\n",["$","p",null,{"children":"The following instructions will guide you through the process of installing the AR.IO node on a Linux machine, specifically Ubuntu 22.04.3 desktop on a home computer. Actual steps may differ slightly on different versions or distributions. This guide will cover how to set up your node, point a domain name to your home network, and create an nginx server for routing traffic to your node. No prior coding experience is required."}],"\n",["$","$L7",null,{"level":2,"id":"system-requirements","children":"System Requirements"}],"\n",["$","p",null,{"children":"Please note, The AR.IO Node software is still in development and testing, all system requirements are subject to change."}],"\n",["$","p",null,{"children":"External storage devices should be formatted as ext4."}],"\n",["$","h3",null,{"children":"Minimum requirements"}],"\n",["$","p",null,{"children":"The hardware specifications listed below represent the minimum system requirements at which the AR.IO Node has been tested. While your Node may still operate on systems with lesser specifications, please note that AR.IO cannot guarantee performance or functionality under those conditions. Use below-minimum hardware at your own risk."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"4 core CPU"}],"\n",["$","li",null,{"children":"4 GB Ram"}],"\n",["$","li",null,{"children":"500 GB storage (SSD recommended)"}],"\n",["$","li",null,{"children":"Stable 50 Mbps internet connection"}],"\n"]}],"\n",["$","h3",null,{"children":"Recommended"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"12 core CPU"}],"\n",["$","li",null,{"children":"32 GB Ram"}],"\n",["$","li",null,{"children":"2 TB SSD storage"}],"\n",["$","li",null,{"children":"Stable 1 Gbps internet connection"}],"\n"]}],"\n",["$","$L7",null,{"level":2,"id":"install-packages","children":"Install Packages"}],"\n",["$","p",null,{"children":["If you would like to quickly install all required and suggested packages, you can run the following 4 commands in your terminal, and skip to ",["$","$L8",null,{"href":"#install-the-node","children":"installing the Node"}],"."]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"bash","code":"sudo apt update -y && sudo apt upgrade -y && sudo apt install -y curl openssh-server git certbot nginx sqlite3 build-essential && sudo systemctl enable ssh && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash && source ~/.bashrc && sudo ufw allow 22 80 443 && sudo ufw enable\n","children":["$","$Lb",null,{"className":"language-bash","children":"$c"}]}]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"bash","code":"# Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n","children":["$","$Lb",null,{"className":"language-bash","children":"$d"}]}]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"bash","code":"sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n","children":["$","$Lb",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">sudo</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">apt-get</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">install</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">docker-ce</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">docker-ce-cli</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">containerd.io</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">docker-buildx-plugin</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">docker-compose-plugin</span></span>\n<span></span>"}]}]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"bash","code":"nvm install 20.11.1 && nvm use 20.11.1 && npm install -g yarn@1.22.22\n","children":["$","$Lb",null,{"className":"language-bash","children":"$e"}]}]}],"\n",["$","h3",null,{"children":"Required packages"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Update your software:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt update\nsudo apt upgrade\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt update</span></span>\n<span><span style=\"color: undefined\">sudo apt upgrade</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Enable your firewall and open necessary ports:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo ufw enable\n\n# Optional: If using SSH, allow port 22\nsudo ufw allow 22\n\n# Allow ports 80 and 443 for HTTP and HTTPS\nsudo ufw allow 80\nsudo ufw allow 443\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo ufw enable</span></span>\n<span><span style=\"color: undefined\"></span></span>\n<span><span style=\"color: undefined\"># Optional: If using SSH, allow port 22</span></span>\n<span><span style=\"color: undefined\">sudo ufw allow 22</span></span>\n<span><span style=\"color: undefined\"></span></span>\n<span><span style=\"color: undefined\"># Allow ports 80 and 443 for HTTP and HTTPS</span></span>\n<span><span style=\"color: undefined\">sudo ufw allow 80</span></span>\n<span><span style=\"color: undefined\">sudo ufw allow 443</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install nginx:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt install nginx -y\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt install nginx -y</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install git:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt install git -y\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt install git -y</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install Docker:"}],"\n"]}],"\n"]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"# Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n","children":["$","$Lb",null,{"children":"$f"}]}]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Test Docker installation:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo docker run hello-world\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo docker run hello-world</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n"]}],"\n",["$","ol",null,{"start":"6","children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install Certbot:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt install certbot -y\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt install certbot -y</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n"]}],"\n",["$","h3",null,{"children":"Suggested packages"}],"\n",["$","p",null,{"children":"These packages are not required to run a node in its basic form. However, they will become necessary for more advanced usage or customization."}],"\n",["$","ol",null,{"start":"7","children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install ssh (optional, for remote access to your Linux machine):"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt install openssh-server -y\nsudo systemctl enable ssh\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt install openssh-server -y</span></span>\n<span><span style=\"color: undefined\">sudo systemctl enable ssh</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install NVM (Node Version Manager):"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\nsource ~/.bashrc\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash</span></span>\n<span><span style=\"color: undefined\">source ~/.bashrc</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install Node.js:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"nvm install 20.11.1\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">nvm install 20.11.1</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install Yarn:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"npm install -g yarn@1.22.22\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">npm install -g yarn@1.22.22</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install build tools:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt install build-essential\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt install build-essential</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Install SQLite:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo apt install sqlite3 -y\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo apt install sqlite3 -y</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n"]}],"\n",["$","$L7",null,{"level":2,"id":"install-the-node","children":"Install the Node"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Navigate to the desired installation location:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"NOTE"}],": Your indexing databases will be created in the project directory unless otherwise specified in your .env file, not your Docker environment. So, if you are using an external hard drive, you should install the node directly to that external drive."]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Clone the ar-io-node repository and navigate into it:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"git clone -b main https://github.com/ar-io/ar-io-node\ncd ar-io-node\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">git clone -b main https://github.com/ar-io/ar-io-node</span></span>\n<span><span style=\"color: undefined\">cd ar-io-node</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Create an environment file:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"nano .env\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">nano .env</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","p",null,{"children":"Paste the following content into the new file, replacing <your-domain> with the domain address you are using to access the node, and <your-public-wallet-address> with the public address of your Arweave wallet, save, and exit:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"GRAPHQL_HOST=arweave.net\nGRAPHQL_PORT=443\nSTART_HEIGHT=1000000\nRUN_OBSERVER=true\nARNS_ROOT_HOST=<your-domain>\nAR_IO_WALLET=<your-public-wallet-address>\nOBSERVER_WALLET=<hot-wallet-public-address>\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">GRAPHQL_HOST=arweave.net</span></span>\n<span><span style=\"color: undefined\">GRAPHQL_PORT=443</span></span>\n<span><span style=\"color: undefined\">START_HEIGHT=1000000</span></span>\n<span><span style=\"color: undefined\">RUN_OBSERVER=true</span></span>\n<span><span style=\"color: undefined\">ARNS_ROOT_HOST=&lt;your-domain&gt;</span></span>\n<span><span style=\"color: undefined\">AR_IO_WALLET=&lt;your-public-wallet-address&gt;</span></span>\n<span><span style=\"color: undefined\">OBSERVER_WALLET=&lt;hot-wallet-public-address&gt;</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"The GRAPHQL values set the proxy for GQL queries to arweave.net, You may use any available gateway that supports GQL queries. If omitted, your node can support GQL queries on locally indexed transactions, but only L1 transactions are indexed by default."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":[["$","$Lb",null,{"children":"START_HEIGHT"}]," is an optional line. It sets the block number where your node will start downloading and indexing transactions headers. Omitting this line will begin indexing at block 0."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":[["$","$Lb",null,{"children":"RUN_OBSERVER"}]," turns on the Observer to generate Network Compliance Reports. This is required for full participation in the AR.IO Network. Set to ",["$","$Lb",null,{"children":"false"}]," to run your gateway without Observer."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":[["$","$Lb",null,{"children":"ARNS_ROOT_HOST"}]," sets the starting point for resolving ARNS names, which are accessed as a subdomain of a gateway. It should be set to the url you are pointing to your node, excluding any protocol prefix. For example, use ",["$","$Lb",null,{"children":"node-ar.io"}]," and not ",["$","$Lb",null,{"children":"https://node-ar.io"}],". If you are using a subdomain to access your node and do not set this value, the node will not understand incoming requests."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":[["$","$Lb",null,{"children":"AR_IO_WALLET"}]," is optional, and sets the wallet you want associated with your Gateway. An associated wallet is required to join the AR.IO network."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":[["$","$Lb",null,{"children":"OBSERVER_WALLET"}]," is the public address of the wallet used to sign Observer transactions. This is required for Observer to run, but may be omitted if you are running a gateway outside of the AR.IO network and do not plan to run Observer. You will need to supply the keyfile to this wallet in the next step."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["More advanced configuration options can be found at ",["$","$L8",null,{"href":"https://ar.io/docs/gateways/ar-io-node/advanced-config.html","children":"ar.io/docs"}]]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Supply Your Observer Wallet Keyfile:"}],"\n",["$","p",null,{"language":"txt","children":["If you are running Observer, you need to provide a wallet keyfile in order to sign report upload transactions. The keyfile must be saved in the ",["$","$Lb",null,{"children":"wallets"}]," directory in the root of the repository. Name the file ",["$","$Lb",null,{"children":"<Observer-Wallet-Address>.json"}],", replacing \"<Observer-Wallet-Address>\" with the public address of the wallet. This should match your ",["$","$Lb",null,{"children":"OBSERVER_WALLET"}]," environmental variable."]}],"\n",["$","p",null,{"children":["Learn more about creating Arweave wallets and obtaining keyfiles ",["$","$L8",null,{"href":"https://ar.io/wallet/","children":"here"}]]}],"\n",["$","div",null,{"className":"border-l-4 border-orange-500 bg-gray-800 text-white p-4 rounded-md","children":[["$","div",null,{"className":"font-semibold text-lg text-orange-300 mb-2","children":"Payment For Observer Report Uploads"}],["$","div",null,{"className":"text-sm","children":["$","p",null,{"language":"txt","children":["By default, the Observer will use ",["$","$L8",null,{"href":"https://docs.ardrive.io/docs/turbo/credits","children":"Turbo Credits"}]," to pay for uploading reports to Arweave. This allows reports under 100kb to be uploaded for free, but larger reports will fail if the Observer wallet does not contain Credits. Including ",["$","$Lb",null,{"children":"REPORT_DATA_SINK=arweave"}]," in your ",["$","$Lb",null,{"children":".env"}]," file will configure the Observer to use AR tokens instead of Turbo Credits, without any free limit."]}]}]]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Start the Docker container:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo docker compose up -d\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo docker compose up -d</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Explanation of flags:","\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":[["$","$Lb",null,{"children":"up"}],": Start the Docker containers."]}],"\n",["$","li",null,{"language":"txt","children":[["$","$Lb",null,{"children":"-d"}],": Run the containers as background processes (detached mode)."]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"language":"txt","children":[["$","strong",null,{"children":"NOTE"}],": Effective with Release #3, it is no longer required to include the ",["$","$Lb",null,{"children":"--build"}]," flag when starting your gateway. Docker will automatically build using the image specified in the ",["$","$Lb",null,{"children":"docker-compose.yaml"}]," file."]}],"\n",["$","p",null,{"children":"To ensure your node is running correctly, follow the next two steps."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Check the logs for errors:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo docker compose logs -f --tail=0\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo docker compose logs -f --tail=0</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Explanation of flags:","\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":[["$","$Lb",null,{"children":"-f"}],": Follow the logs in real time."]}],"\n",["$","li",null,{"language":"txt","children":[["$","$Lb",null,{"children":"--tail=0"}],": Ignore all logs from before running the command."]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"language":"txt","children":[["$","strong",null,{"children":"NOTE"}],": Previous versions of these instructions advised checking a gateway's ability to fetch content using ",["$","$Lb",null,{"children":"localhost"}],". Subsequent security updates prevent this without first unsetting ",["$","$Lb",null,{"children":"ARNS_ROOT_HOST"}]," in your ",["$","$Lb",null,{"children":".env"}],"."]}],"\n"]}],"\n"]}],"\n",["$","$L7",null,{"level":2,"id":"set-up-networking","children":"Set up Networking"}],"\n",["$","p",null,{"children":"The following guide assumes you are running your node on a local home computer."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["Register a Domain Name:\nChoose a domain registrar (e.g., ",["$","$L8",null,{"href":"https://www.namecheap.com","children":"Namecheap"}],") to register a domain name."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Point the Domain at Your Home Internet:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["Obtain your public IP address by visiting ",["$","$L8",null,{"href":"https://www.whatsmyip.org/","children":"https://www.whatsmyip.org/"}]," or running:"]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"bash","code":"curl ifconfig.me\n","children":["$","$Lb",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">curl</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">ifconfig.me</span></span>\n<span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Create an A record with your registrar for your domain and wildcard subdomains, using your public IP address. For example, if your domain is \"ar.io,\" create a record for \"ar.io\" and \"*.ar.io.\""}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Set up Port Forwarding:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Obtain the local IP address of the machine where the node is installed by running:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"ip addr show | grep -w inet | awk '{print $2}' | awk -F'/' '{print $1}'\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">ip addr show | grep -w inet | awk &#39;{print $2}&#39; | awk -F&#39;/&#39; &#39;{print $1}&#39;</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"If there are multiple lines of output, choose the one starting with 192 (usually)."}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Enter your router's IP address in the address bar of a browser (e.g., ",["$","$Lb",null,{"children":"192.168.0.1"}],")."]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"If you're unsure of your router's IP address, consult your router's documentation or contact your Internet Service Provider (ISP)."}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Navigate to the port forwarding settings in your router configuration."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"The exact steps may vary depending on your router model. Consult your router's documentation or support for detailed steps."}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Set up port forwarding rules to forward incoming traffic on ports 80 (HTTP) and 443 (HTTPS) to the same ports on the machine running your node. You may also forward port 22 if you want to enable SSH access to your node from outside your home network."}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Create SSL (HTTPS) Certificates for Your Domain:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo certbot certonly --manual --preferred-challenges dns -d <your-domain>.com -d '*.<your-domain>.com'\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo certbot certonly --manual --preferred-challenges dns -d &lt;your-domain&gt;.com -d &#39;*.&lt;your-domain&gt;.com&#39;</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","p",null,{"children":["Follow the instructions to create the required TXT records for your domain in your chosen registrar. Use a ",["$","$L8",null,{"href":"https://dnschecker.org/","children":"DNS checker"}]," to verify the propagation of each record."]}],"\n",["$","div",null,{"className":"border-l-4 border-orange-500 bg-gray-800 text-white p-4 rounded-md","children":[["$","div",null,{"className":"font-semibold text-lg text-orange-300 mb-2","children":"Email Notifications"}],["$","div",null,{"className":"text-sm","children":["$","p",null,{"children":"Previous versions of these instructions advised providing an email address to Certbot. As of June 2025, LetsEncrypt (the certificate authority used by Certbot) no longer supports email notifications."}]}]]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"IMPORTANT"}],": Wild card subdomain (*.<your-domain>.com) cannot auto renew without obtaining an API key from your domain registrar. Not all registrars offer this. Certbot certificates expire every 90 days. Be sure to consult with your chosen registrar to see if they offer an API for this purpose, or run the above command again to renew your certificates. You will receive an email warning at the address you provided to remind you when it is time to renew."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Configure nginx:\nnginx is a free and open-source web server and reverse proxy server. It will handle incoming traffic, provide SSL certificates, and redirect the traffic to your node."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Open the default configuration file:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo nano /etc/nginx/sites-available/default\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo nano /etc/nginx/sites-available/default</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Replace the file's contents with the following configuration (replace \"<your-domain>\" when necessary):"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"# Force redirects from HTTP to HTTPS\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name <your-domain>.com *.<your-domain>.com;\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n}\n\n# Forward traffic to your node and provide SSL certificates\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    server_name <your-domain>.com *.<your-domain>.com;\n\n    ssl_certificate /etc/letsencrypt/live/<your-domain>.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/<your-domain>.com/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_http_version 1.1;\n    }\n}\n","children":["$","$Lb",null,{"children":"$10"}]}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Save and exit nano."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Test the configuration:"}],"\n"]}],"\n"]}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo nginx -t\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo nginx -t</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"If there are no errors, restart nginx:"}],"\n",["$","$L9",null,{"children":["$","$La",null,{"language":"txt","code":"sudo service nginx restart\n","children":["$","$Lb",null,{"children":"<span><span style=\"color: undefined\">sudo service nginx restart</span></span>\n<span><span style=\"color: undefined\"></span></span>"}]}]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"children":"Your node should now be running and connected to the internet. Test it by entering https://<your-domain>/3lyxgbgEvqNSvJrTX2J7CfRychUD5KClFhhVLyTPNCQ in your browser."}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Note"}],": If you encounter any issues during the installation process, please seek assistance from the ",["$","$L8",null,{"href":"https://discord.gg/7zUPfN4D6g","children":"AR.IO community"}],"."]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L11",null,{}]}]]}],null,["$","$L12",null,{"children":["$L13","$L14",["$","$L15",null,{"promise":"$@16"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","kNkbGfBeEDHbRZW-4Jy72v",{"children":[["$","$L17",null,{"children":"$L18"}],null]}],["$","$L19",null,{"children":"$L1a"}]]}],false]],"m":"$undefined","G":["$1b","$undefined"],"s":false,"S":true}
1c:"$Sreact.suspense"
1d:I[74911,[],"AsyncMetadata"]
1a:["$","div",null,{"hidden":true,"children":["$","$1c",null,{"fallback":null,"children":["$","$L1d",null,{"promise":"$@1e"}]}]}]
14:null
18:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
13:null
16:{"metadata":[["$","title","0",{"children":"AR.IO Docs"}],["$","meta","1",{"name":"description","content":"AR.IO is a decentralized compute network that makes the permaweb more accessible."}],["$","link","2",{"rel":"icon","href":"/docs-v2/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
1e:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
